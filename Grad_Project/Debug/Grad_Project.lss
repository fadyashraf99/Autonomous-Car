
Grad_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018c  00800060  00004080  00004114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008001ec  008001ec  000042a0  2**0
                  ALLOC
  3 .stab         00003510  00000000  00000000  000042a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001dd2  00000000  00000000  000077b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3f       	cpi	r26, 0xFE	; 254
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <main>
      8a:	0c 94 3e 20 	jmp	0x407c	; 0x407c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e8       	ldi	r26, 0x8C	; 140
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e8       	ldi	r24, 0x8C	; 140
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e8       	ldi	r22, 0x8C	; 140
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 17 20 	jmp	0x402e	; 0x402e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 18 20 	jmp	0x4030	; 0x4030 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ec 56       	subi	r30, 0x6C	; 108
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <memcpy>:
     df8:	fb 01       	movw	r30, r22
     dfa:	dc 01       	movw	r26, r24
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <memcpy+0xa>
     dfe:	01 90       	ld	r0, Z+
     e00:	0d 92       	st	X+, r0
     e02:	41 50       	subi	r20, 0x01	; 1
     e04:	50 40       	sbci	r21, 0x00	; 0
     e06:	d8 f7       	brcc	.-10     	; 0xdfe <memcpy+0x6>
     e08:	08 95       	ret

00000e0a <strlen>:
     e0a:	fc 01       	movw	r30, r24
     e0c:	01 90       	ld	r0, Z+
     e0e:	00 20       	and	r0, r0
     e10:	e9 f7       	brne	.-6      	; 0xe0c <strlen+0x2>
     e12:	80 95       	com	r24
     e14:	90 95       	com	r25
     e16:	8e 0f       	add	r24, r30
     e18:	9f 1f       	adc	r25, r31
     e1a:	08 95       	ret

00000e1c <itoa>:
     e1c:	fb 01       	movw	r30, r22
     e1e:	9f 01       	movw	r18, r30
     e20:	e8 94       	clt
     e22:	42 30       	cpi	r20, 0x02	; 2
     e24:	c4 f0       	brlt	.+48     	; 0xe56 <itoa+0x3a>
     e26:	45 32       	cpi	r20, 0x25	; 37
     e28:	b4 f4       	brge	.+44     	; 0xe56 <itoa+0x3a>
     e2a:	4a 30       	cpi	r20, 0x0A	; 10
     e2c:	29 f4       	brne	.+10     	; 0xe38 <itoa+0x1c>
     e2e:	97 fb       	bst	r25, 7
     e30:	1e f4       	brtc	.+6      	; 0xe38 <itoa+0x1c>
     e32:	90 95       	com	r25
     e34:	81 95       	neg	r24
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	64 2f       	mov	r22, r20
     e3a:	77 27       	eor	r23, r23
     e3c:	0e 94 2a 20 	call	0x4054	; 0x4054 <__udivmodhi4>
     e40:	80 5d       	subi	r24, 0xD0	; 208
     e42:	8a 33       	cpi	r24, 0x3A	; 58
     e44:	0c f0       	brlt	.+2      	; 0xe48 <itoa+0x2c>
     e46:	89 5d       	subi	r24, 0xD9	; 217
     e48:	81 93       	st	Z+, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	a1 f7       	brne	.-24     	; 0xe38 <itoa+0x1c>
     e50:	16 f4       	brtc	.+4      	; 0xe56 <itoa+0x3a>
     e52:	5d e2       	ldi	r21, 0x2D	; 45
     e54:	51 93       	st	Z+, r21
     e56:	10 82       	st	Z, r1
     e58:	c9 01       	movw	r24, r18
     e5a:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <strrev>

00000e5e <strrev>:
     e5e:	dc 01       	movw	r26, r24
     e60:	fc 01       	movw	r30, r24
     e62:	67 2f       	mov	r22, r23
     e64:	71 91       	ld	r23, Z+
     e66:	77 23       	and	r23, r23
     e68:	e1 f7       	brne	.-8      	; 0xe62 <strrev+0x4>
     e6a:	32 97       	sbiw	r30, 0x02	; 2
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <strrev+0x18>
     e6e:	7c 91       	ld	r23, X
     e70:	6d 93       	st	X+, r22
     e72:	70 83       	st	Z, r23
     e74:	62 91       	ld	r22, -Z
     e76:	ae 17       	cp	r26, r30
     e78:	bf 07       	cpc	r27, r31
     e7a:	c8 f3       	brcs	.-14     	; 0xe6e <strrev+0x10>
     e7c:	08 95       	ret

00000e7e <timer0_init>:
 */

#include "timer.h"

void timer0_init(void)	//Initializes Timer0 with 1024 prescaler.
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer 0 */
	TCCR0 = DISABLE_MODULE_VALUE;
     e86:	e3 e5       	ldi	r30, 0x53	; 83
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	10 82       	st	Z, r1
	/* Setting pre scaler */
	TCCR0 = (PRESCLR1_VALUE);
     e8c:	e3 e5       	ldi	r30, 0x53	; 83
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 83       	st	Z, r24
	/* Initializing the timer with zero */
	TCNT0 = ZER0_INITIALIZER;
     e94:	e2 e5       	ldi	r30, 0x52	; 82
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	10 82       	st	Z, r1
	/* Timer overflow interrupt enable*/
	TIMSK |= (1 << TOIE0);
     e9a:	a9 e5       	ldi	r26, 0x59	; 89
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e9 e5       	ldi	r30, 0x59	; 89
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	81 60       	ori	r24, 0x01	; 1
     ea6:	8c 93       	st	X, r24

	return;
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <Dio_init>:

#include "Dio.h"

extern pin_config_type pin_config[32];

void Dio_init(void) {
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <Dio_init+0x6>
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <Dio_init+0x8>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
     eba:	1a 82       	std	Y+2, r1	; 0x02
     ebc:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i < (sizeof(pin_config) / sizeof(pin_config[0])); i++) {
     ebe:	1a 82       	std	Y+2, r1	; 0x02
     ec0:	19 82       	std	Y+1, r1	; 0x01
     ec2:	58 c1       	rjmp	.+688    	; 0x1174 <Dio_init+0x2c6>
		switch (pin_config[i].Port) {
     ec4:	29 81       	ldd	r18, Y+1	; 0x01
     ec6:	3a 81       	ldd	r19, Y+2	; 0x02
     ec8:	c9 01       	movw	r24, r18
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	82 0f       	add	r24, r18
     ed0:	93 1f       	adc	r25, r19
     ed2:	fc 01       	movw	r30, r24
     ed4:	ec 56       	subi	r30, 0x6C	; 108
     ed6:	fe 4f       	sbci	r31, 0xFE	; 254
     ed8:	80 81       	ld	r24, Z
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3c 83       	std	Y+4, r19	; 0x04
     ee0:	2b 83       	std	Y+3, r18	; 0x03
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <Dio_init+0x40>
     eec:	61 c0       	rjmp	.+194    	; 0xfb0 <Dio_init+0x102>
     eee:	2b 81       	ldd	r18, Y+3	; 0x03
     ef0:	3c 81       	ldd	r19, Y+4	; 0x04
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	2c f4       	brge	.+10     	; 0xf02 <Dio_init+0x54>
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	71 f0       	breq	.+28     	; 0xf1c <Dio_init+0x6e>
     f00:	34 c1       	rjmp	.+616    	; 0x116a <Dio_init+0x2bc>
     f02:	2b 81       	ldd	r18, Y+3	; 0x03
     f04:	3c 81       	ldd	r19, Y+4	; 0x04
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	31 05       	cpc	r19, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <Dio_init+0x60>
     f0c:	9b c0       	rjmp	.+310    	; 0x1044 <Dio_init+0x196>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	83 30       	cpi	r24, 0x03	; 3
     f14:	91 05       	cpc	r25, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <Dio_init+0x6c>
     f18:	df c0       	rjmp	.+446    	; 0x10d8 <Dio_init+0x22a>
     f1a:	27 c1       	rjmp	.+590    	; 0x116a <Dio_init+0x2bc>
		case DIO_PortA:
			if (pin_config[i].Dir == OUTPUT) {
     f1c:	29 81       	ldd	r18, Y+1	; 0x01
     f1e:	3a 81       	ldd	r19, Y+2	; 0x02
     f20:	c9 01       	movw	r24, r18
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	82 0f       	add	r24, r18
     f28:	93 1f       	adc	r25, r19
     f2a:	fc 01       	movw	r30, r24
     f2c:	ea 56       	subi	r30, 0x6A	; 106
     f2e:	fe 4f       	sbci	r31, 0xFE	; 254
     f30:	80 81       	ld	r24, Z
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	f1 f4       	brne	.+60     	; 0xf72 <Dio_init+0xc4>
				SET_BIT(DDRA, pin_config[i].Pin);
     f36:	aa e3       	ldi	r26, 0x3A	; 58
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ea e3       	ldi	r30, 0x3A	; 58
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	29 81       	ldd	r18, Y+1	; 0x01
     f44:	3a 81       	ldd	r19, Y+2	; 0x02
     f46:	c9 01       	movw	r24, r18
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	fc 01       	movw	r30, r24
     f52:	eb 56       	subi	r30, 0x6B	; 107
     f54:	fe 4f       	sbci	r31, 0xFE	; 254
     f56:	80 81       	ld	r24, Z
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <Dio_init+0xba>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <Dio_init+0xb6>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	fc c0       	rjmp	.+504    	; 0x116a <Dio_init+0x2bc>
			} else {
				CLR_BIT(DDRA, pin_config[i].Pin);
     f72:	aa e3       	ldi	r26, 0x3A	; 58
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ea e3       	ldi	r30, 0x3A	; 58
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	29 81       	ldd	r18, Y+1	; 0x01
     f80:	3a 81       	ldd	r19, Y+2	; 0x02
     f82:	c9 01       	movw	r24, r18
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	82 0f       	add	r24, r18
     f8a:	93 1f       	adc	r25, r19
     f8c:	fc 01       	movw	r30, r24
     f8e:	eb 56       	subi	r30, 0x6B	; 107
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	80 81       	ld	r24, Z
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <Dio_init+0xf6>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <Dio_init+0xf2>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	dd c0       	rjmp	.+442    	; 0x116a <Dio_init+0x2bc>
			}
			break;
		case DIO_PortB:
			if (pin_config[i].Dir == OUTPUT) {
     fb0:	29 81       	ldd	r18, Y+1	; 0x01
     fb2:	3a 81       	ldd	r19, Y+2	; 0x02
     fb4:	c9 01       	movw	r24, r18
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	fc 01       	movw	r30, r24
     fc0:	ea 56       	subi	r30, 0x6A	; 106
     fc2:	fe 4f       	sbci	r31, 0xFE	; 254
     fc4:	80 81       	ld	r24, Z
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	f1 f4       	brne	.+60     	; 0x1006 <Dio_init+0x158>
				SET_BIT(DDRB, pin_config[i].Pin);
     fca:	a7 e3       	ldi	r26, 0x37	; 55
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e7 e3       	ldi	r30, 0x37	; 55
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	29 81       	ldd	r18, Y+1	; 0x01
     fd8:	3a 81       	ldd	r19, Y+2	; 0x02
     fda:	c9 01       	movw	r24, r18
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	82 0f       	add	r24, r18
     fe2:	93 1f       	adc	r25, r19
     fe4:	fc 01       	movw	r30, r24
     fe6:	eb 56       	subi	r30, 0x6B	; 107
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <Dio_init+0x14e>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <Dio_init+0x14a>
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	b2 c0       	rjmp	.+356    	; 0x116a <Dio_init+0x2bc>
			} else {
				CLR_BIT(DDRB, pin_config[i].Pin);
    1006:	a7 e3       	ldi	r26, 0x37	; 55
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e7 e3       	ldi	r30, 0x37	; 55
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	29 81       	ldd	r18, Y+1	; 0x01
    1014:	3a 81       	ldd	r19, Y+2	; 0x02
    1016:	c9 01       	movw	r24, r18
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	82 0f       	add	r24, r18
    101e:	93 1f       	adc	r25, r19
    1020:	fc 01       	movw	r30, r24
    1022:	eb 56       	subi	r30, 0x6B	; 107
    1024:	fe 4f       	sbci	r31, 0xFE	; 254
    1026:	80 81       	ld	r24, Z
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <Dio_init+0x18a>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <Dio_init+0x186>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	93 c0       	rjmp	.+294    	; 0x116a <Dio_init+0x2bc>
			}
			break;
		case DIO_PortC:
			if (pin_config[i].Dir == OUTPUT) {
    1044:	29 81       	ldd	r18, Y+1	; 0x01
    1046:	3a 81       	ldd	r19, Y+2	; 0x02
    1048:	c9 01       	movw	r24, r18
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	fc 01       	movw	r30, r24
    1054:	ea 56       	subi	r30, 0x6A	; 106
    1056:	fe 4f       	sbci	r31, 0xFE	; 254
    1058:	80 81       	ld	r24, Z
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	f1 f4       	brne	.+60     	; 0x109a <Dio_init+0x1ec>
				SET_BIT(DDRC, pin_config[i].Pin);
    105e:	a4 e3       	ldi	r26, 0x34	; 52
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e4 e3       	ldi	r30, 0x34	; 52
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	29 81       	ldd	r18, Y+1	; 0x01
    106c:	3a 81       	ldd	r19, Y+2	; 0x02
    106e:	c9 01       	movw	r24, r18
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	fc 01       	movw	r30, r24
    107a:	eb 56       	subi	r30, 0x6B	; 107
    107c:	fe 4f       	sbci	r31, 0xFE	; 254
    107e:	80 81       	ld	r24, Z
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <Dio_init+0x1e2>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <Dio_init+0x1de>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	68 c0       	rjmp	.+208    	; 0x116a <Dio_init+0x2bc>
			} else {
				CLR_BIT(DDRC, pin_config[i].Pin);
    109a:	a4 e3       	ldi	r26, 0x34	; 52
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e4 e3       	ldi	r30, 0x34	; 52
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	29 81       	ldd	r18, Y+1	; 0x01
    10a8:	3a 81       	ldd	r19, Y+2	; 0x02
    10aa:	c9 01       	movw	r24, r18
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	82 0f       	add	r24, r18
    10b2:	93 1f       	adc	r25, r19
    10b4:	fc 01       	movw	r30, r24
    10b6:	eb 56       	subi	r30, 0x6B	; 107
    10b8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ba:	80 81       	ld	r24, Z
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <Dio_init+0x21e>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <Dio_init+0x21a>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	49 c0       	rjmp	.+146    	; 0x116a <Dio_init+0x2bc>
			}
			break;
		case DIO_PortD:
			if (pin_config[i].Dir == OUTPUT) {
    10d8:	29 81       	ldd	r18, Y+1	; 0x01
    10da:	3a 81       	ldd	r19, Y+2	; 0x02
    10dc:	c9 01       	movw	r24, r18
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	fc 01       	movw	r30, r24
    10e8:	ea 56       	subi	r30, 0x6A	; 106
    10ea:	fe 4f       	sbci	r31, 0xFE	; 254
    10ec:	80 81       	ld	r24, Z
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	f1 f4       	brne	.+60     	; 0x112e <Dio_init+0x280>
				SET_BIT(DDRD, pin_config[i].Pin);
    10f2:	a1 e3       	ldi	r26, 0x31	; 49
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e1 e3       	ldi	r30, 0x31	; 49
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	29 81       	ldd	r18, Y+1	; 0x01
    1100:	3a 81       	ldd	r19, Y+2	; 0x02
    1102:	c9 01       	movw	r24, r18
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	fc 01       	movw	r30, r24
    110e:	eb 56       	subi	r30, 0x6B	; 107
    1110:	fe 4f       	sbci	r31, 0xFE	; 254
    1112:	80 81       	ld	r24, Z
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <Dio_init+0x276>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <Dio_init+0x272>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	1e c0       	rjmp	.+60     	; 0x116a <Dio_init+0x2bc>
			} else {
				CLR_BIT(DDRD, pin_config[i].Pin);
    112e:	a1 e3       	ldi	r26, 0x31	; 49
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e1 e3       	ldi	r30, 0x31	; 49
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	29 81       	ldd	r18, Y+1	; 0x01
    113c:	3a 81       	ldd	r19, Y+2	; 0x02
    113e:	c9 01       	movw	r24, r18
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	82 0f       	add	r24, r18
    1146:	93 1f       	adc	r25, r19
    1148:	fc 01       	movw	r30, r24
    114a:	eb 56       	subi	r30, 0x6B	; 107
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <Dio_init+0x2b2>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <Dio_init+0x2ae>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24

extern pin_config_type pin_config[32];

void Dio_init(void) {
	int i = 0;
	for (i = 0; i < (sizeof(pin_config) / sizeof(pin_config[0])); i++) {
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	80 32       	cpi	r24, 0x20	; 32
    117a:	91 05       	cpc	r25, r1
    117c:	08 f4       	brcc	.+2      	; 0x1180 <Dio_init+0x2d2>
    117e:	a2 ce       	rjmp	.-700    	; 0xec4 <Dio_init+0x16>
			break;
		default:
			break;
		}
	}
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <Dio_write>:
 1 -> PORT B
 2 -> PORT C
 3 -> PORT D
 */

void Dio_write(Channel_Type channel, state_type state) {
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <Dio_write+0x6>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <Dio_write+0x8>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <Dio_write+0xa>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	8b 83       	std	Y+3, r24	; 0x03
    119e:	6c 83       	std	Y+4, r22	; 0x04
	Dio_port_type Port_variable = channel / 8;
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	86 95       	lsr	r24
    11a4:	86 95       	lsr	r24
    11a6:	86 95       	lsr	r24
    11a8:	8a 83       	std	Y+2, r24	; 0x02
	Dio_pin_type Pin_num = channel % 8;
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	87 70       	andi	r24, 0x07	; 7
    11ae:	89 83       	std	Y+1, r24	; 0x01
	switch (Port_variable) {
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3e 83       	std	Y+6, r19	; 0x06
    11b8:	2d 83       	std	Y+5, r18	; 0x05
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <Dio_write+0x38>
    11c4:	43 c0       	rjmp	.+134    	; 0x124c <Dio_write+0xbe>
    11c6:	2d 81       	ldd	r18, Y+5	; 0x05
    11c8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	2c f4       	brge	.+10     	; 0x11da <Dio_write+0x4c>
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <Dio_write+0x66>
    11d8:	bc c0       	rjmp	.+376    	; 0x1352 <Dio_write+0x1c4>
    11da:	2d 81       	ldd	r18, Y+5	; 0x05
    11dc:	3e 81       	ldd	r19, Y+6	; 0x06
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <Dio_write+0x58>
    11e4:	5f c0       	rjmp	.+190    	; 0x12a4 <Dio_write+0x116>
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	91 05       	cpc	r25, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <Dio_write+0x64>
    11f0:	85 c0       	rjmp	.+266    	; 0x12fc <Dio_write+0x16e>
    11f2:	af c0       	rjmp	.+350    	; 0x1352 <Dio_write+0x1c4>
	case 0:
		if (state == 1) {
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	a1 f4       	brne	.+40     	; 0x1222 <Dio_write+0x94>
			SET_BIT(PORTA, Pin_num);
    11fa:	ab e3       	ldi	r26, 0x3B	; 59
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <Dio_write+0x8a>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <Dio_write+0x86>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	98 c0       	rjmp	.+304    	; 0x1352 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTA, Pin_num);
    1222:	ab e3       	ldi	r26, 0x3B	; 59
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	eb e3       	ldi	r30, 0x3B	; 59
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <Dio_write+0xb2>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <Dio_write+0xae>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	83 c0       	rjmp	.+262    	; 0x1352 <Dio_write+0x1c4>
		}
		break;
	case 1:
		if (state == 1) {
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	a1 f4       	brne	.+40     	; 0x127a <Dio_write+0xec>
			SET_BIT(PORTB, Pin_num);
    1252:	a8 e3       	ldi	r26, 0x38	; 56
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <Dio_write+0xe2>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <Dio_write+0xde>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	6c c0       	rjmp	.+216    	; 0x1352 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTB, Pin_num);
    127a:	a8 e3       	ldi	r26, 0x38	; 56
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e8 e3       	ldi	r30, 0x38	; 56
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <Dio_write+0x10a>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <Dio_write+0x106>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	57 c0       	rjmp	.+174    	; 0x1352 <Dio_write+0x1c4>
		}
		break;
	case 2:
		if (state == 1) {
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	a1 f4       	brne	.+40     	; 0x12d2 <Dio_write+0x144>
			SET_BIT(PORTC, Pin_num);
    12aa:	a5 e3       	ldi	r26, 0x35	; 53
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e3       	ldi	r30, 0x35	; 53
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <Dio_write+0x13a>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <Dio_write+0x136>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	40 c0       	rjmp	.+128    	; 0x1352 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTC, Pin_num);
    12d2:	a5 e3       	ldi	r26, 0x35	; 53
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e5 e3       	ldi	r30, 0x35	; 53
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <Dio_write+0x162>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <Dio_write+0x15e>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	2b c0       	rjmp	.+86     	; 0x1352 <Dio_write+0x1c4>
		}
		break;
	case 3:
		if (state == 1) {
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	a1 f4       	brne	.+40     	; 0x132a <Dio_write+0x19c>
			SET_BIT(PORTD, Pin_num);
    1302:	a2 e3       	ldi	r26, 0x32	; 50
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e2 e3       	ldi	r30, 0x32	; 50
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <Dio_write+0x192>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <Dio_write+0x18e>
    1324:	84 2b       	or	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	14 c0       	rjmp	.+40     	; 0x1352 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTD, Pin_num);
    132a:	a2 e3       	ldi	r26, 0x32	; 50
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e2 e3       	ldi	r30, 0x32	; 50
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <Dio_write+0x1ba>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <Dio_write+0x1b6>
    134c:	80 95       	com	r24
    134e:	84 23       	and	r24, r20
    1350:	8c 93       	st	X, r24
		}
		break;
	}
}
    1352:	26 96       	adiw	r28, 0x06	; 6
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <Dio_read>:

state_type Dio_read(Channel_Type channel) {
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <Dio_read+0x6>
    136a:	00 d0       	rcall	.+0      	; 0x136c <Dio_read+0x8>
    136c:	00 d0       	rcall	.+0      	; 0x136e <Dio_read+0xa>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	8c 83       	std	Y+4, r24	; 0x04

	state_type state = 0;
    1374:	1b 82       	std	Y+3, r1	; 0x03
	Dio_port_type port = channel / 8;
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	86 95       	lsr	r24
    137a:	86 95       	lsr	r24
    137c:	86 95       	lsr	r24
    137e:	8a 83       	std	Y+2, r24	; 0x02
	Dio_pin_type pin = channel % 8;
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	87 70       	andi	r24, 0x07	; 7
    1384:	89 83       	std	Y+1, r24	; 0x01
	switch (port) {
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3e 83       	std	Y+6, r19	; 0x06
    138e:	2d 83       	std	Y+5, r18	; 0x05
    1390:	4d 81       	ldd	r20, Y+5	; 0x05
    1392:	5e 81       	ldd	r21, Y+6	; 0x06
    1394:	41 30       	cpi	r20, 0x01	; 1
    1396:	51 05       	cpc	r21, r1
    1398:	41 f1       	breq	.+80     	; 0x13ea <Dio_read+0x86>
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	91 05       	cpc	r25, r1
    13a2:	34 f4       	brge	.+12     	; 0x13b0 <Dio_read+0x4c>
    13a4:	2d 81       	ldd	r18, Y+5	; 0x05
    13a6:	3e 81       	ldd	r19, Y+6	; 0x06
    13a8:	21 15       	cp	r18, r1
    13aa:	31 05       	cpc	r19, r1
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <Dio_read+0x62>
    13ae:	53 c0       	rjmp	.+166    	; 0x1456 <Dio_read+0xf2>
    13b0:	4d 81       	ldd	r20, Y+5	; 0x05
    13b2:	5e 81       	ldd	r21, Y+6	; 0x06
    13b4:	42 30       	cpi	r20, 0x02	; 2
    13b6:	51 05       	cpc	r21, r1
    13b8:	51 f1       	breq	.+84     	; 0x140e <Dio_read+0xaa>
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	b9 f1       	breq	.+110    	; 0x1432 <Dio_read+0xce>
    13c4:	48 c0       	rjmp	.+144    	; 0x1456 <Dio_read+0xf2>
	case 0:
		state = GET_BIT(PINA, pin);
    13c6:	e9 e3       	ldi	r30, 0x39	; 57
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a9 01       	movw	r20, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <Dio_read+0x7a>
    13da:	55 95       	asr	r21
    13dc:	47 95       	ror	r20
    13de:	8a 95       	dec	r24
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <Dio_read+0x76>
    13e2:	ca 01       	movw	r24, r20
    13e4:	81 70       	andi	r24, 0x01	; 1
    13e6:	8b 83       	std	Y+3, r24	; 0x03
    13e8:	38 c0       	rjmp	.+112    	; 0x145a <Dio_read+0xf6>
		break;
	case 1:
		state = GET_BIT(PINB, pin);
    13ea:	e6 e3       	ldi	r30, 0x36	; 54
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a9 01       	movw	r20, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <Dio_read+0x9e>
    13fe:	55 95       	asr	r21
    1400:	47 95       	ror	r20
    1402:	8a 95       	dec	r24
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <Dio_read+0x9a>
    1406:	ca 01       	movw	r24, r20
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	8b 83       	std	Y+3, r24	; 0x03
    140c:	26 c0       	rjmp	.+76     	; 0x145a <Dio_read+0xf6>
		break;
	case 2:
		state = GET_BIT(PINC, pin);
    140e:	e3 e3       	ldi	r30, 0x33	; 51
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a9 01       	movw	r20, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <Dio_read+0xc2>
    1422:	55 95       	asr	r21
    1424:	47 95       	ror	r20
    1426:	8a 95       	dec	r24
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <Dio_read+0xbe>
    142a:	ca 01       	movw	r24, r20
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	8b 83       	std	Y+3, r24	; 0x03
    1430:	14 c0       	rjmp	.+40     	; 0x145a <Dio_read+0xf6>
		break;
	case 3:
		state = GET_BIT(PIND, pin);
    1432:	e0 e3       	ldi	r30, 0x30	; 48
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a9 01       	movw	r20, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <Dio_read+0xe6>
    1446:	55 95       	asr	r21
    1448:	47 95       	ror	r20
    144a:	8a 95       	dec	r24
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <Dio_read+0xe2>
    144e:	ca 01       	movw	r24, r20
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	02 c0       	rjmp	.+4      	; 0x145a <Dio_read+0xf6>
		break;
	default:
		state = -1;
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}
	return state;
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    145c:	26 96       	adiw	r28, 0x06	; 6
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <ultrasonic_init>:
uint8_t rising_edge = 0;
uint32_t timer_counter = 0;
int distance;
char distance_str[10];

void ultrasonic_init(void) {		//initialize ultrasonic
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62

	TRIGER_DDR |= (1 << TRIGER);
    1476:	a1 e3       	ldi	r26, 0x31	; 49
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e1 e3       	ldi	r30, 0x31	; 49
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	81 60       	ori	r24, 0x01	; 1
    1482:	8c 93       	st	X, r24
	ECHO_DDR &= ~(1 << ECHO);
    1484:	a1 e3       	ldi	r26, 0x31	; 49
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e1 e3       	ldi	r30, 0x31	; 49
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8b 7f       	andi	r24, 0xFB	; 251
    1490:	8c 93       	st	X, r24
	ECHO_PULLUP |= (1 << ECHO);
    1492:	a2 e3       	ldi	r26, 0x32	; 50
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e2 e3       	ldi	r30, 0x32	; 50
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	84 60       	ori	r24, 0x04	; 4
    149e:	8c 93       	st	X, r24
	enable_ex_interrupt();
    14a0:	0e 94 57 0a 	call	0x14ae	; 0x14ae <enable_ex_interrupt>
	timer0_init();
    14a4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <timer0_init>
	return;
}
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <enable_ex_interrupt>:

void enable_ex_interrupt(void) {
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62

	MCUCR |= (1 << ISC00);		// Trigger INT0 on any logic change.
    14b6:	a5 e5       	ldi	r26, 0x55	; 85
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e5       	ldi	r30, 0x55	; 85
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	81 60       	ori	r24, 0x01	; 1
    14c2:	8c 93       	st	X, r24
	GICR |= (1 << INT0);		// Enable INT0 interrupts.
    14c4:	ab e5       	ldi	r26, 0x5B	; 91
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e5       	ldi	r30, 0x5B	; 91
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 64       	ori	r24, 0x40	; 64
    14d0:	8c 93       	st	X, r24

	return;
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <ultra_triger>:

void ultra_triger(void) {
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	68 97       	sbiw	r28, 0x18	; 24
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
	if (!sensor_working) {
    14ec:	80 91 ec 01 	lds	r24, 0x01EC
    14f0:	88 23       	and	r24, r24
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <ultra_triger+0x1e>
    14f4:	cf c0       	rjmp	.+414    	; 0x1694 <ultra_triger+0x1bc>
		TRIGER_PORT |= (1 << TRIGER);
    14f6:	a2 e3       	ldi	r26, 0x32	; 50
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e2 e3       	ldi	r30, 0x32	; 50
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	81 60       	ori	r24, 0x01	; 1
    1502:	8c 93       	st	X, r24
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a0 e7       	ldi	r26, 0x70	; 112
    150a:	b1 e4       	ldi	r27, 0x41	; 65
    150c:	8d 8b       	std	Y+21, r24	; 0x15
    150e:	9e 8b       	std	Y+22, r25	; 0x16
    1510:	af 8b       	std	Y+23, r26	; 0x17
    1512:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1514:	6d 89       	ldd	r22, Y+21	; 0x15
    1516:	7e 89       	ldd	r23, Y+22	; 0x16
    1518:	8f 89       	ldd	r24, Y+23	; 0x17
    151a:	98 8d       	ldd	r25, Y+24	; 0x18
    151c:	2b ea       	ldi	r18, 0xAB	; 171
    151e:	3a ea       	ldi	r19, 0xAA	; 170
    1520:	4a ea       	ldi	r20, 0xAA	; 170
    1522:	50 e4       	ldi	r21, 0x40	; 64
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	89 8b       	std	Y+17, r24	; 0x11
    152e:	9a 8b       	std	Y+18, r25	; 0x12
    1530:	ab 8b       	std	Y+19, r26	; 0x13
    1532:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1534:	69 89       	ldd	r22, Y+17	; 0x11
    1536:	7a 89       	ldd	r23, Y+18	; 0x12
    1538:	8b 89       	ldd	r24, Y+19	; 0x13
    153a:	9c 89       	ldd	r25, Y+20	; 0x14
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e8       	ldi	r20, 0x80	; 128
    1542:	5f e3       	ldi	r21, 0x3F	; 63
    1544:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1548:	88 23       	and	r24, r24
    154a:	1c f4       	brge	.+6      	; 0x1552 <ultra_triger+0x7a>
		__ticks = 1;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	88 8b       	std	Y+16, r24	; 0x10
    1550:	91 c0       	rjmp	.+290    	; 0x1674 <ultra_triger+0x19c>
	else if (__tmp > 255)
    1552:	69 89       	ldd	r22, Y+17	; 0x11
    1554:	7a 89       	ldd	r23, Y+18	; 0x12
    1556:	8b 89       	ldd	r24, Y+19	; 0x13
    1558:	9c 89       	ldd	r25, Y+20	; 0x14
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	4f e7       	ldi	r20, 0x7F	; 127
    1560:	53 e4       	ldi	r21, 0x43	; 67
    1562:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1566:	18 16       	cp	r1, r24
    1568:	0c f0       	brlt	.+2      	; 0x156c <ultra_triger+0x94>
    156a:	7b c0       	rjmp	.+246    	; 0x1662 <ultra_triger+0x18a>
	{
		_delay_ms(__us / 1000.0);
    156c:	6d 89       	ldd	r22, Y+21	; 0x15
    156e:	7e 89       	ldd	r23, Y+22	; 0x16
    1570:	8f 89       	ldd	r24, Y+23	; 0x17
    1572:	98 8d       	ldd	r25, Y+24	; 0x18
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	4a e7       	ldi	r20, 0x7A	; 122
    157a:	54 e4       	ldi	r21, 0x44	; 68
    157c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	8c 87       	std	Y+12, r24	; 0x0c
    1586:	9d 87       	std	Y+13, r25	; 0x0d
    1588:	ae 87       	std	Y+14, r26	; 0x0e
    158a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158c:	6c 85       	ldd	r22, Y+12	; 0x0c
    158e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1590:	8e 85       	ldd	r24, Y+14	; 0x0e
    1592:	9f 85       	ldd	r25, Y+15	; 0x0f
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a e7       	ldi	r20, 0x7A	; 122
    159a:	55 e4       	ldi	r21, 0x45	; 69
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	88 87       	std	Y+8, r24	; 0x08
    15a6:	99 87       	std	Y+9, r25	; 0x09
    15a8:	aa 87       	std	Y+10, r26	; 0x0a
    15aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    15ac:	68 85       	ldd	r22, Y+8	; 0x08
    15ae:	79 85       	ldd	r23, Y+9	; 0x09
    15b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <ultra_triger+0xf6>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9f 83       	std	Y+7, r25	; 0x07
    15ca:	8e 83       	std	Y+6, r24	; 0x06
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <ultra_triger+0x174>
	else if (__tmp > 65535)
    15ce:	68 85       	ldd	r22, Y+8	; 0x08
    15d0:	79 85       	ldd	r23, Y+9	; 0x09
    15d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	4c f5       	brge	.+82     	; 0x1638 <ultra_triger+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    15e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    15ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9f 83       	std	Y+7, r25	; 0x07
    160c:	8e 83       	std	Y+6, r24	; 0x06
    160e:	0f c0       	rjmp	.+30     	; 0x162e <ultra_triger+0x156>
    1610:	80 e9       	ldi	r24, 0x90	; 144
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	9d 83       	std	Y+5, r25	; 0x05
    1616:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	9d 81       	ldd	r25, Y+5	; 0x05
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <ultra_triger+0x144>
    1620:	9d 83       	std	Y+5, r25	; 0x05
    1622:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	8e 81       	ldd	r24, Y+6	; 0x06
    1626:	9f 81       	ldd	r25, Y+7	; 0x07
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9f 83       	std	Y+7, r25	; 0x07
    162c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	8e 81       	ldd	r24, Y+6	; 0x06
    1630:	9f 81       	ldd	r25, Y+7	; 0x07
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	69 f7       	brne	.-38     	; 0x1610 <ultra_triger+0x138>
    1636:	24 c0       	rjmp	.+72     	; 0x1680 <ultra_triger+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1638:	68 85       	ldd	r22, Y+8	; 0x08
    163a:	79 85       	ldd	r23, Y+9	; 0x09
    163c:	8a 85       	ldd	r24, Y+10	; 0x0a
    163e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9f 83       	std	Y+7, r25	; 0x07
    164a:	8e 83       	std	Y+6, r24	; 0x06
    164c:	8e 81       	ldd	r24, Y+6	; 0x06
    164e:	9f 81       	ldd	r25, Y+7	; 0x07
    1650:	9b 83       	std	Y+3, r25	; 0x03
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <ultra_triger+0x180>
    165c:	9b 83       	std	Y+3, r25	; 0x03
    165e:	8a 83       	std	Y+2, r24	; 0x02
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <ultra_triger+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1662:	69 89       	ldd	r22, Y+17	; 0x11
    1664:	7a 89       	ldd	r23, Y+18	; 0x12
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	88 8b       	std	Y+16, r24	; 0x10
    1674:	88 89       	ldd	r24, Y+16	; 0x10
    1676:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	8a 95       	dec	r24
    167c:	f1 f7       	brne	.-4      	; 0x167a <ultra_triger+0x1a2>
    167e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(15);
		TRIGER_PORT &= ~(1 << TRIGER);
    1680:	a2 e3       	ldi	r26, 0x32	; 50
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e2 e3       	ldi	r30, 0x32	; 50
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	8e 7f       	andi	r24, 0xFE	; 254
    168c:	8c 93       	st	X, r24
		sensor_working = 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	80 93 ec 01 	sts	0x01EC, r24
	}
}
    1694:	68 96       	adiw	r28, 0x18	; 24
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <__vector_1>:

ISR(INT0_vect) {
    16a6:	1f 92       	push	r1
    16a8:	0f 92       	push	r0
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	0f 92       	push	r0
    16ae:	11 24       	eor	r1, r1
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	2e 97       	sbiw	r28, 0x0e	; 14
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	cd bf       	out	0x3d, r28	; 61
	if (sensor_working == 1) {
    16d6:	80 91 ec 01 	lds	r24, 0x01EC
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <__vector_1+0x3a>
    16de:	d4 c0       	rjmp	.+424    	; 0x1888 <__vector_1+0x1e2>
		if (rising_edge == 0) {
    16e0:	80 91 ed 01 	lds	r24, 0x01ED
    16e4:	88 23       	and	r24, r24
    16e6:	79 f4       	brne	.+30     	; 0x1706 <__vector_1+0x60>
			TCNT0 = 0x00;
    16e8:	e2 e5       	ldi	r30, 0x52	; 82
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	10 82       	st	Z, r1
			rising_edge = 1;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	80 93 ed 01 	sts	0x01ED, r24
			timer_counter = 0;
    16f4:	10 92 ee 01 	sts	0x01EE, r1
    16f8:	10 92 ef 01 	sts	0x01EF, r1
    16fc:	10 92 f0 01 	sts	0x01F0, r1
    1700:	10 92 f1 01 	sts	0x01F1, r1
    1704:	c1 c0       	rjmp	.+386    	; 0x1888 <__vector_1+0x1e2>
		} else {
			distance = (timer_counter * 256 + TCNT0) / 466;
    1706:	80 91 ee 01 	lds	r24, 0x01EE
    170a:	90 91 ef 01 	lds	r25, 0x01EF
    170e:	a0 91 f0 01 	lds	r26, 0x01F0
    1712:	b0 91 f1 01 	lds	r27, 0x01F1
    1716:	22 27       	eor	r18, r18
    1718:	38 2f       	mov	r19, r24
    171a:	49 2f       	mov	r20, r25
    171c:	5a 2f       	mov	r21, r26
    171e:	e2 e5       	ldi	r30, 0x52	; 82
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	82 0f       	add	r24, r18
    172e:	93 1f       	adc	r25, r19
    1730:	a4 1f       	adc	r26, r20
    1732:	b5 1f       	adc	r27, r21
    1734:	22 ed       	ldi	r18, 0xD2	; 210
    1736:	31 e0       	ldi	r19, 0x01	; 1
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <__udivmodsi4>
    1744:	da 01       	movw	r26, r20
    1746:	c9 01       	movw	r24, r18
    1748:	90 93 f3 01 	sts	0x01F3, r25
    174c:	80 93 f2 01 	sts	0x01F2, r24
			lcd_goto_xy(1, 0);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <lcd_goto_xy>
			itoa(distance, distance_str, 10);
    1758:	80 91 f2 01 	lds	r24, 0x01F2
    175c:	90 91 f3 01 	lds	r25, 0x01F3
    1760:	24 ef       	ldi	r18, 0xF4	; 244
    1762:	31 e0       	ldi	r19, 0x01	; 1
    1764:	b9 01       	movw	r22, r18
    1766:	4a e0       	ldi	r20, 0x0A	; 10
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <itoa>
			strcat(distance_str, " cm ");
    176e:	84 ef       	ldi	r24, 0xF4	; 244
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	0e 94 05 07 	call	0xe0a	; 0xe0a <strlen>
    1776:	8c 50       	subi	r24, 0x0C	; 12
    1778:	9e 4f       	sbci	r25, 0xFE	; 254
    177a:	20 e6       	ldi	r18, 0x60	; 96
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	b9 01       	movw	r22, r18
    1780:	45 e0       	ldi	r20, 0x05	; 5
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <memcpy>
			lcd_write_word(distance_str);
    1788:	84 ef       	ldi	r24, 0xF4	; 244
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	0e 94 10 11 	call	0x2220	; 0x2220 <lcd_write_word>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a0 e2       	ldi	r26, 0x20	; 32
    1796:	b2 e4       	ldi	r27, 0x42	; 66
    1798:	8b 87       	std	Y+11, r24	; 0x0b
    179a:	9c 87       	std	Y+12, r25	; 0x0c
    179c:	ad 87       	std	Y+13, r26	; 0x0d
    179e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4a e7       	ldi	r20, 0x7A	; 122
    17ae:	55 e4       	ldi	r21, 0x45	; 69
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	8f 83       	std	Y+7, r24	; 0x07
    17ba:	98 87       	std	Y+8, r25	; 0x08
    17bc:	a9 87       	std	Y+9, r26	; 0x09
    17be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5f e3       	ldi	r21, 0x3F	; 63
    17d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17d4:	88 23       	and	r24, r24
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <__vector_1+0x13c>
		__ticks = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	3f c0       	rjmp	.+126    	; 0x1860 <__vector_1+0x1ba>
	else if (__tmp > 65535)
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	57 e4       	ldi	r21, 0x47	; 71
    17f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	4c f5       	brge	.+82     	; 0x184c <__vector_1+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <__vector_1+0x19c>
    1824:	80 e9       	ldi	r24, 0x90	; 144
    1826:	91 e0       	ldi	r25, 0x01	; 1
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <__vector_1+0x18a>
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <__vector_1+0x17e>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <__vector_1+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <__vector_1+0x1c6>
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(40);
			timer_counter = 0;
    1874:	10 92 ee 01 	sts	0x01EE, r1
    1878:	10 92 ef 01 	sts	0x01EF, r1
    187c:	10 92 f0 01 	sts	0x01F0, r1
    1880:	10 92 f1 01 	sts	0x01F1, r1
			rising_edge = 0;
    1884:	10 92 ed 01 	sts	0x01ED, r1
		}
	}
}
    1888:	2e 96       	adiw	r28, 0x0e	; 14
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	ff 91       	pop	r31
    1894:	ef 91       	pop	r30
    1896:	bf 91       	pop	r27
    1898:	af 91       	pop	r26
    189a:	9f 91       	pop	r25
    189c:	8f 91       	pop	r24
    189e:	7f 91       	pop	r23
    18a0:	6f 91       	pop	r22
    18a2:	5f 91       	pop	r21
    18a4:	4f 91       	pop	r20
    18a6:	3f 91       	pop	r19
    18a8:	2f 91       	pop	r18
    18aa:	0f 90       	pop	r0
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	0f 90       	pop	r0
    18b0:	1f 90       	pop	r1
    18b2:	18 95       	reti

000018b4 <__vector_11>:

ISR(TIMER0_OVF_vect) {
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	2f 93       	push	r18
    18c0:	8f 93       	push	r24
    18c2:	9f 93       	push	r25
    18c4:	af 93       	push	r26
    18c6:	bf 93       	push	r27
    18c8:	ef 93       	push	r30
    18ca:	ff 93       	push	r31
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	timer_counter++;
    18d4:	80 91 ee 01 	lds	r24, 0x01EE
    18d8:	90 91 ef 01 	lds	r25, 0x01EF
    18dc:	a0 91 f0 01 	lds	r26, 0x01F0
    18e0:	b0 91 f1 01 	lds	r27, 0x01F1
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	a1 1d       	adc	r26, r1
    18e8:	b1 1d       	adc	r27, r1
    18ea:	80 93 ee 01 	sts	0x01EE, r24
    18ee:	90 93 ef 01 	sts	0x01EF, r25
    18f2:	a0 93 f0 01 	sts	0x01F0, r26
    18f6:	b0 93 f1 01 	sts	0x01F1, r27
	if (timer_counter > 730) {
    18fa:	80 91 ee 01 	lds	r24, 0x01EE
    18fe:	90 91 ef 01 	lds	r25, 0x01EF
    1902:	a0 91 f0 01 	lds	r26, 0x01F0
    1906:	b0 91 f1 01 	lds	r27, 0x01F1
    190a:	8b 3d       	cpi	r24, 0xDB	; 219
    190c:	22 e0       	ldi	r18, 0x02	; 2
    190e:	92 07       	cpc	r25, r18
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	a2 07       	cpc	r26, r18
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	b2 07       	cpc	r27, r18
    1918:	78 f0       	brcs	.+30     	; 0x1938 <__vector_11+0x84>
		TCNT0 = 0x00;
    191a:	e2 e5       	ldi	r30, 0x52	; 82
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	10 82       	st	Z, r1
		sensor_working = 0;
    1920:	10 92 ec 01 	sts	0x01EC, r1
		rising_edge = 0;
    1924:	10 92 ed 01 	sts	0x01ED, r1
		timer_counter = 0;
    1928:	10 92 ee 01 	sts	0x01EE, r1
    192c:	10 92 ef 01 	sts	0x01EF, r1
    1930:	10 92 f0 01 	sts	0x01F0, r1
    1934:	10 92 f1 01 	sts	0x01F1, r1
	}
}
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	ff 91       	pop	r31
    193e:	ef 91       	pop	r30
    1940:	bf 91       	pop	r27
    1942:	af 91       	pop	r26
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	2f 91       	pop	r18
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <tim1_pwm>:
 */

#include "SERVO.h"

void tim1_pwm(void)				//initialize servo
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
    195c:	af e4       	ldi	r26, 0x4F	; 79
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	ef e4       	ldi	r30, 0x4F	; 79
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	82 6a       	ori	r24, 0xA2	; 162
    1968:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10);
    196a:	ae e4       	ldi	r26, 0x4E	; 78
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	ee e4       	ldi	r30, 0x4E	; 78
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	8b 61       	ori	r24, 0x1B	; 27
    1976:	8c 93       	st	X, r24
	ICR1 = 4999;
    1978:	e6 e4       	ldi	r30, 0x46	; 70
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	87 e8       	ldi	r24, 0x87	; 135
    197e:	93 e1       	ldi	r25, 0x13	; 19
    1980:	91 83       	std	Z+1, r25	; 0x01
    1982:	80 83       	st	Z, r24
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <servo_write>:

void servo_write(char angle)	//set servo angle
{
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	0f 92       	push	r0
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = (int) ((angle * 2.78f) + 125);
    199a:	0a e4       	ldi	r16, 0x4A	; 74
    199c:	10 e0       	ldi	r17, 0x00	; 0
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	aa 27       	eor	r26, r26
    19a6:	97 fd       	sbrc	r25, 7
    19a8:	a0 95       	com	r26
    19aa:	ba 2f       	mov	r27, r26
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	25 e8       	ldi	r18, 0x85	; 133
    19be:	3b ee       	ldi	r19, 0xEB	; 235
    19c0:	41 e3       	ldi	r20, 0x31	; 49
    19c2:	50 e4       	ldi	r21, 0x40	; 64
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4a ef       	ldi	r20, 0xFA	; 250
    19d6:	52 e4       	ldi	r21, 0x42	; 66
    19d8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
}
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	08 95       	ret

000019fe <lcd_init>:
 */

#include "LCD.h"

void lcd_init(void)	//initialize LCD pins as output and seting up the operation mode(4-bit)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	e8 97       	sbiw	r28, 0x38	; 56
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61

	DATA_DDR = (1 << LCD_D7) | (1 << LCD_D6) | (1 << LCD_D5) | (1 << LCD_D4);
    1a12:	ea e3       	ldi	r30, 0x3A	; 58
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 ef       	ldi	r24, 0xF0	; 240
    1a18:	80 83       	st	Z, r24
	CTL_DDR |= (1 << LCD_EN) | (1 << LCD_RW) | (1 << LCD_RS);
    1a1a:	a7 e3       	ldi	r26, 0x37	; 55
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e7 e3       	ldi	r30, 0x37	; 55
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8e 60       	ori	r24, 0x0E	; 14
    1a26:	8c 93       	st	X, r24

	DATA_BUS_A = (0 << LCD_D7) | (0 << LCD_D6) | (1 << LCD_D5) | (0 << LCD_D4);
    1a28:	eb e3       	ldi	r30, 0x3B	; 59
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 e2       	ldi	r24, 0x20	; 32
    1a2e:	80 83       	st	Z, r24
	CTL_BUS |= (1 << LCD_EN) | (0 << LCD_RW) | (0 << LCD_RS);
    1a30:	a8 e3       	ldi	r26, 0x38	; 56
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e8 e3       	ldi	r30, 0x38	; 56
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	88 60       	ori	r24, 0x08	; 8
    1a3c:	8c 93       	st	X, r24
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a0 ea       	ldi	r26, 0xA0	; 160
    1a44:	b0 e4       	ldi	r27, 0x40	; 64
    1a46:	8d ab       	std	Y+53, r24	; 0x35
    1a48:	9e ab       	std	Y+54, r25	; 0x36
    1a4a:	af ab       	std	Y+55, r26	; 0x37
    1a4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a50:	7e a9       	ldd	r23, Y+54	; 0x36
    1a52:	8f a9       	ldd	r24, Y+55	; 0x37
    1a54:	98 ad       	ldd	r25, Y+56	; 0x38
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	4a e7       	ldi	r20, 0x7A	; 122
    1a5c:	55 e4       	ldi	r21, 0x45	; 69
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	89 ab       	std	Y+49, r24	; 0x31
    1a68:	9a ab       	std	Y+50, r25	; 0x32
    1a6a:	ab ab       	std	Y+51, r26	; 0x33
    1a6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a70:	7a a9       	ldd	r23, Y+50	; 0x32
    1a72:	8b a9       	ldd	r24, Y+51	; 0x33
    1a74:	9c a9       	ldd	r25, Y+52	; 0x34
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e8       	ldi	r20, 0x80	; 128
    1a7c:	5f e3       	ldi	r21, 0x3F	; 63
    1a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a82:	88 23       	and	r24, r24
    1a84:	2c f4       	brge	.+10     	; 0x1a90 <lcd_init+0x92>
		__ticks = 1;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	98 ab       	std	Y+48, r25	; 0x30
    1a8c:	8f a7       	std	Y+47, r24	; 0x2f
    1a8e:	3f c0       	rjmp	.+126    	; 0x1b0e <lcd_init+0x110>
	else if (__tmp > 65535)
    1a90:	69 a9       	ldd	r22, Y+49	; 0x31
    1a92:	7a a9       	ldd	r23, Y+50	; 0x32
    1a94:	8b a9       	ldd	r24, Y+51	; 0x33
    1a96:	9c a9       	ldd	r25, Y+52	; 0x34
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	57 e4       	ldi	r21, 0x47	; 71
    1aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	4c f5       	brge	.+82     	; 0x1afa <lcd_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    1aac:	8f a9       	ldd	r24, Y+55	; 0x37
    1aae:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e2       	ldi	r20, 0x20	; 32
    1ab6:	51 e4       	ldi	r21, 0x41	; 65
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	98 ab       	std	Y+48, r25	; 0x30
    1ace:	8f a7       	std	Y+47, r24	; 0x2f
    1ad0:	0f c0       	rjmp	.+30     	; 0x1af0 <lcd_init+0xf2>
    1ad2:	80 e9       	ldi	r24, 0x90	; 144
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	9e a7       	std	Y+46, r25	; 0x2e
    1ad8:	8d a7       	std	Y+45, r24	; 0x2d
    1ada:	8d a5       	ldd	r24, Y+45	; 0x2d
    1adc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <lcd_init+0xe0>
    1ae2:	9e a7       	std	Y+46, r25	; 0x2e
    1ae4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	98 ab       	std	Y+48, r25	; 0x30
    1aee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af2:	98 a9       	ldd	r25, Y+48	; 0x30
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	69 f7       	brne	.-38     	; 0x1ad2 <lcd_init+0xd4>
    1af8:	14 c0       	rjmp	.+40     	; 0x1b22 <lcd_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afa:	69 a9       	ldd	r22, Y+49	; 0x31
    1afc:	7a a9       	ldd	r23, Y+50	; 0x32
    1afe:	8b a9       	ldd	r24, Y+51	; 0x33
    1b00:	9c a9       	ldd	r25, Y+52	; 0x34
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	98 ab       	std	Y+48, r25	; 0x30
    1b0c:	8f a7       	std	Y+47, r24	; 0x2f
    1b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b10:	98 a9       	ldd	r25, Y+48	; 0x30
    1b12:	9c a7       	std	Y+44, r25	; 0x2c
    1b14:	8b a7       	std	Y+43, r24	; 0x2b
    1b16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <lcd_init+0x11c>
    1b1e:	9c a7       	std	Y+44, r25	; 0x2c
    1b20:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(5);
	CTL_BUS &= ~(1 << LCD_EN);
    1b22:	a8 e3       	ldi	r26, 0x38	; 56
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e8 e3       	ldi	r30, 0x38	; 56
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	87 7f       	andi	r24, 0xF7	; 247
    1b2e:	8c 93       	st	X, r24
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a0 ea       	ldi	r26, 0xA0	; 160
    1b36:	b0 e4       	ldi	r27, 0x40	; 64
    1b38:	8f a3       	std	Y+39, r24	; 0x27
    1b3a:	98 a7       	std	Y+40, r25	; 0x28
    1b3c:	a9 a7       	std	Y+41, r26	; 0x29
    1b3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b40:	6f a1       	ldd	r22, Y+39	; 0x27
    1b42:	78 a5       	ldd	r23, Y+40	; 0x28
    1b44:	89 a5       	ldd	r24, Y+41	; 0x29
    1b46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	4a e7       	ldi	r20, 0x7A	; 122
    1b4e:	55 e4       	ldi	r21, 0x45	; 69
    1b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	8b a3       	std	Y+35, r24	; 0x23
    1b5a:	9c a3       	std	Y+36, r25	; 0x24
    1b5c:	ad a3       	std	Y+37, r26	; 0x25
    1b5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b60:	6b a1       	ldd	r22, Y+35	; 0x23
    1b62:	7c a1       	ldd	r23, Y+36	; 0x24
    1b64:	8d a1       	ldd	r24, Y+37	; 0x25
    1b66:	9e a1       	ldd	r25, Y+38	; 0x26
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <lcd_init+0x184>
		__ticks = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9a a3       	std	Y+34, r25	; 0x22
    1b7e:	89 a3       	std	Y+33, r24	; 0x21
    1b80:	3f c0       	rjmp	.+126    	; 0x1c00 <lcd_init+0x202>
	else if (__tmp > 65535)
    1b82:	6b a1       	ldd	r22, Y+35	; 0x23
    1b84:	7c a1       	ldd	r23, Y+36	; 0x24
    1b86:	8d a1       	ldd	r24, Y+37	; 0x25
    1b88:	9e a1       	ldd	r25, Y+38	; 0x26
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	4c f5       	brge	.+82     	; 0x1bec <lcd_init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9a a3       	std	Y+34, r25	; 0x22
    1bc0:	89 a3       	std	Y+33, r24	; 0x21
    1bc2:	0f c0       	rjmp	.+30     	; 0x1be2 <lcd_init+0x1e4>
    1bc4:	80 e9       	ldi	r24, 0x90	; 144
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	98 a3       	std	Y+32, r25	; 0x20
    1bca:	8f 8f       	std	Y+31, r24	; 0x1f
    1bcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bce:	98 a1       	ldd	r25, Y+32	; 0x20
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <lcd_init+0x1d2>
    1bd4:	98 a3       	std	Y+32, r25	; 0x20
    1bd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bda:	9a a1       	ldd	r25, Y+34	; 0x22
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	9a a3       	std	Y+34, r25	; 0x22
    1be0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be2:	89 a1       	ldd	r24, Y+33	; 0x21
    1be4:	9a a1       	ldd	r25, Y+34	; 0x22
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	69 f7       	brne	.-38     	; 0x1bc4 <lcd_init+0x1c6>
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <lcd_init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bec:	6b a1       	ldd	r22, Y+35	; 0x23
    1bee:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9a a3       	std	Y+34, r25	; 0x22
    1bfe:	89 a3       	std	Y+33, r24	; 0x21
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	9e 8f       	std	Y+30, r25	; 0x1e
    1c06:	8d 8f       	std	Y+29, r24	; 0x1d
    1c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <lcd_init+0x20e>
    1c10:	9e 8f       	std	Y+30, r25	; 0x1e
    1c12:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
    1c14:	88 e2       	ldi	r24, 0x28	; 40
    1c16:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <lcd_send_command>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c20:	b0 e4       	ldi	r27, 0x40	; 64
    1c22:	89 8f       	std	Y+25, r24	; 0x19
    1c24:	9a 8f       	std	Y+26, r25	; 0x1a
    1c26:	ab 8f       	std	Y+27, r26	; 0x1b
    1c28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a e7       	ldi	r20, 0x7A	; 122
    1c38:	55 e4       	ldi	r21, 0x45	; 69
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8d 8b       	std	Y+21, r24	; 0x15
    1c44:	9e 8b       	std	Y+22, r25	; 0x16
    1c46:	af 8b       	std	Y+23, r26	; 0x17
    1c48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <lcd_init+0x26e>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9c 8b       	std	Y+20, r25	; 0x14
    1c68:	8b 8b       	std	Y+19, r24	; 0x13
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <lcd_init+0x2ec>
	else if (__tmp > 65535)
    1c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c70:	8f 89       	ldd	r24, Y+23	; 0x17
    1c72:	98 8d       	ldd	r25, Y+24	; 0x18
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	4c f5       	brge	.+82     	; 0x1cd6 <lcd_init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c84:	69 8d       	ldd	r22, Y+25	; 0x19
    1c86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9c 8b       	std	Y+20, r25	; 0x14
    1caa:	8b 8b       	std	Y+19, r24	; 0x13
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <lcd_init+0x2ce>
    1cae:	80 e9       	ldi	r24, 0x90	; 144
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	9a 8b       	std	Y+18, r25	; 0x12
    1cb4:	89 8b       	std	Y+17, r24	; 0x11
    1cb6:	89 89       	ldd	r24, Y+17	; 0x11
    1cb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <lcd_init+0x2bc>
    1cbe:	9a 8b       	std	Y+18, r25	; 0x12
    1cc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cce:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <lcd_init+0x2b0>
    1cd4:	14 c0       	rjmp	.+40     	; 0x1cfe <lcd_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cda:	8f 89       	ldd	r24, Y+23	; 0x17
    1cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9c 8b       	std	Y+20, r25	; 0x14
    1ce8:	8b 8b       	std	Y+19, r24	; 0x13
    1cea:	8b 89       	ldd	r24, Y+19	; 0x13
    1cec:	9c 89       	ldd	r25, Y+20	; 0x14
    1cee:	98 8b       	std	Y+16, r25	; 0x10
    1cf0:	8f 87       	std	Y+15, r24	; 0x0f
    1cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf4:	98 89       	ldd	r25, Y+16	; 0x10
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <lcd_init+0x2f8>
    1cfa:	98 8b       	std	Y+16, r25	; 0x10
    1cfc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	lcd_send_command(LCD_CMD_DISPLAY_CURSOR_BLINK);
    1cfe:	8f e0       	ldi	r24, 0x0F	; 15
    1d00:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <lcd_send_command>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 ea       	ldi	r26, 0xA0	; 160
    1d0a:	b0 e4       	ldi	r27, 0x40	; 64
    1d0c:	8b 87       	std	Y+11, r24	; 0x0b
    1d0e:	9c 87       	std	Y+12, r25	; 0x0c
    1d10:	ad 87       	std	Y+13, r26	; 0x0d
    1d12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4a e7       	ldi	r20, 0x7A	; 122
    1d22:	55 e4       	ldi	r21, 0x45	; 69
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	8f 83       	std	Y+7, r24	; 0x07
    1d2e:	98 87       	std	Y+8, r25	; 0x08
    1d30:	a9 87       	std	Y+9, r26	; 0x09
    1d32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <lcd_init+0x358>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	3f c0       	rjmp	.+126    	; 0x1dd4 <lcd_init+0x3d6>
	else if (__tmp > 65535)
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	4c f5       	brge	.+82     	; 0x1dc0 <lcd_init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <lcd_init+0x3b8>
    1d98:	80 e9       	ldi	r24, 0x90	; 144
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	9c 83       	std	Y+4, r25	; 0x04
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <lcd_init+0x3a6>
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <lcd_init+0x39a>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <lcd_init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <lcd_init+0x3e2>
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	lcd_send_command(0x80);
    1de8:	80 e8       	ldi	r24, 0x80	; 128
    1dea:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <lcd_send_command>

}
    1dee:	e8 96       	adiw	r28, 0x38	; 56
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <lcd_send_command>:

void lcd_send_command(uint8_t command)	//sending a command to LCD by sending
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	e9 97       	sbiw	r28, 0x39	; 57
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	89 af       	std	Y+57, r24	; 0x39
	DATA_BUS_A = ((command & 0b11110000));
    1e16:	eb e3       	ldi	r30, 0x3B	; 59
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e1c:	80 7f       	andi	r24, 0xF0	; 240
    1e1e:	80 83       	st	Z, r24
	CTL_BUS &= ~(1 << LCD_RS);
    1e20:	a8 e3       	ldi	r26, 0x38	; 56
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e8 e3       	ldi	r30, 0x38	; 56
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	8d 7f       	andi	r24, 0xFD	; 253
    1e2c:	8c 93       	st	X, r24
	CTL_BUS |= (1 << LCD_EN);
    1e2e:	a8 e3       	ldi	r26, 0x38	; 56
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	88 60       	ori	r24, 0x08	; 8
    1e3a:	8c 93       	st	X, r24
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 ea       	ldi	r26, 0xA0	; 160
    1e42:	b0 e4       	ldi	r27, 0x40	; 64
    1e44:	8d ab       	std	Y+53, r24	; 0x35
    1e46:	9e ab       	std	Y+54, r25	; 0x36
    1e48:	af ab       	std	Y+55, r26	; 0x37
    1e4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e50:	8f a9       	ldd	r24, Y+55	; 0x37
    1e52:	98 ad       	ldd	r25, Y+56	; 0x38
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a e7       	ldi	r20, 0x7A	; 122
    1e5a:	55 e4       	ldi	r21, 0x45	; 69
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	89 ab       	std	Y+49, r24	; 0x31
    1e66:	9a ab       	std	Y+50, r25	; 0x32
    1e68:	ab ab       	std	Y+51, r26	; 0x33
    1e6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e70:	8b a9       	ldd	r24, Y+51	; 0x33
    1e72:	9c a9       	ldd	r25, Y+52	; 0x34
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <lcd_send_command+0x8e>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	98 ab       	std	Y+48, r25	; 0x30
    1e8a:	8f a7       	std	Y+47, r24	; 0x2f
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <lcd_send_command+0x10c>
	else if (__tmp > 65535)
    1e8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e90:	7a a9       	ldd	r23, Y+50	; 0x32
    1e92:	8b a9       	ldd	r24, Y+51	; 0x33
    1e94:	9c a9       	ldd	r25, Y+52	; 0x34
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <lcd_send_command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea8:	7e a9       	ldd	r23, Y+54	; 0x36
    1eaa:	8f a9       	ldd	r24, Y+55	; 0x37
    1eac:	98 ad       	ldd	r25, Y+56	; 0x38
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	98 ab       	std	Y+48, r25	; 0x30
    1ecc:	8f a7       	std	Y+47, r24	; 0x2f
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <lcd_send_command+0xee>
    1ed0:	80 e9       	ldi	r24, 0x90	; 144
    1ed2:	91 e0       	ldi	r25, 0x01	; 1
    1ed4:	9e a7       	std	Y+46, r25	; 0x2e
    1ed6:	8d a7       	std	Y+45, r24	; 0x2d
    1ed8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eda:	9e a5       	ldd	r25, Y+46	; 0x2e
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <lcd_send_command+0xdc>
    1ee0:	9e a7       	std	Y+46, r25	; 0x2e
    1ee2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	98 ab       	std	Y+48, r25	; 0x30
    1eec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <lcd_send_command+0xd0>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <lcd_send_command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	69 a9       	ldd	r22, Y+49	; 0x31
    1efa:	7a a9       	ldd	r23, Y+50	; 0x32
    1efc:	8b a9       	ldd	r24, Y+51	; 0x33
    1efe:	9c a9       	ldd	r25, Y+52	; 0x34
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	98 ab       	std	Y+48, r25	; 0x30
    1f0a:	8f a7       	std	Y+47, r24	; 0x2f
    1f0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f10:	9c a7       	std	Y+44, r25	; 0x2c
    1f12:	8b a7       	std	Y+43, r24	; 0x2b
    1f14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <lcd_send_command+0x118>
    1f1c:	9c a7       	std	Y+44, r25	; 0x2c
    1f1e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &= ~(1 << LCD_EN);
    1f20:	a8 e3       	ldi	r26, 0x38	; 56
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e8 e3       	ldi	r30, 0x38	; 56
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	87 7f       	andi	r24, 0xF7	; 247
    1f2c:	8c 93       	st	X, r24
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 ea       	ldi	r26, 0xA0	; 160
    1f34:	b0 e4       	ldi	r27, 0x40	; 64
    1f36:	8f a3       	std	Y+39, r24	; 0x27
    1f38:	98 a7       	std	Y+40, r25	; 0x28
    1f3a:	a9 a7       	std	Y+41, r26	; 0x29
    1f3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f40:	78 a5       	ldd	r23, Y+40	; 0x28
    1f42:	89 a5       	ldd	r24, Y+41	; 0x29
    1f44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a e7       	ldi	r20, 0x7A	; 122
    1f4c:	55 e4       	ldi	r21, 0x45	; 69
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8b a3       	std	Y+35, r24	; 0x23
    1f58:	9c a3       	std	Y+36, r25	; 0x24
    1f5a:	ad a3       	std	Y+37, r26	; 0x25
    1f5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f60:	7c a1       	ldd	r23, Y+36	; 0x24
    1f62:	8d a1       	ldd	r24, Y+37	; 0x25
    1f64:	9e a1       	ldd	r25, Y+38	; 0x26
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <lcd_send_command+0x180>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9a a3       	std	Y+34, r25	; 0x22
    1f7c:	89 a3       	std	Y+33, r24	; 0x21
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <lcd_send_command+0x1fe>
	else if (__tmp > 65535)
    1f80:	6b a1       	ldd	r22, Y+35	; 0x23
    1f82:	7c a1       	ldd	r23, Y+36	; 0x24
    1f84:	8d a1       	ldd	r24, Y+37	; 0x25
    1f86:	9e a1       	ldd	r25, Y+38	; 0x26
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <lcd_send_command+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6f a1       	ldd	r22, Y+39	; 0x27
    1f9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9a a3       	std	Y+34, r25	; 0x22
    1fbe:	89 a3       	std	Y+33, r24	; 0x21
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <lcd_send_command+0x1e0>
    1fc2:	80 e9       	ldi	r24, 0x90	; 144
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	98 a3       	std	Y+32, r25	; 0x20
    1fc8:	8f 8f       	std	Y+31, r24	; 0x1f
    1fca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fcc:	98 a1       	ldd	r25, Y+32	; 0x20
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <lcd_send_command+0x1ce>
    1fd2:	98 a3       	std	Y+32, r25	; 0x20
    1fd4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9a a3       	std	Y+34, r25	; 0x22
    1fde:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <lcd_send_command+0x1c2>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <lcd_send_command+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	6b a1       	ldd	r22, Y+35	; 0x23
    1fec:	7c a1       	ldd	r23, Y+36	; 0x24
    1fee:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9a a3       	std	Y+34, r25	; 0x22
    1ffc:	89 a3       	std	Y+33, r24	; 0x21
    1ffe:	89 a1       	ldd	r24, Y+33	; 0x21
    2000:	9a a1       	ldd	r25, Y+34	; 0x22
    2002:	9e 8f       	std	Y+30, r25	; 0x1e
    2004:	8d 8f       	std	Y+29, r24	; 0x1d
    2006:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2008:	9e 8d       	ldd	r25, Y+30	; 0x1e
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <lcd_send_command+0x20a>
    200e:	9e 8f       	std	Y+30, r25	; 0x1e
    2010:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS_A = ((command & 0b00001111) << 4);
    2012:	eb e3       	ldi	r30, 0x3B	; 59
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	89 ad       	ldd	r24, Y+57	; 0x39
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	82 95       	swap	r24
    201e:	92 95       	swap	r25
    2020:	90 7f       	andi	r25, 0xF0	; 240
    2022:	98 27       	eor	r25, r24
    2024:	80 7f       	andi	r24, 0xF0	; 240
    2026:	98 27       	eor	r25, r24
    2028:	80 83       	st	Z, r24
	CTL_BUS |= (1 << LCD_EN);
    202a:	a8 e3       	ldi	r26, 0x38	; 56
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e8 e3       	ldi	r30, 0x38	; 56
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	88 60       	ori	r24, 0x08	; 8
    2036:	8c 93       	st	X, r24
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 ea       	ldi	r26, 0xA0	; 160
    203e:	b0 e4       	ldi	r27, 0x40	; 64
    2040:	89 8f       	std	Y+25, r24	; 0x19
    2042:	9a 8f       	std	Y+26, r25	; 0x1a
    2044:	ab 8f       	std	Y+27, r26	; 0x1b
    2046:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	69 8d       	ldd	r22, Y+25	; 0x19
    204a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    204c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    204e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a e7       	ldi	r20, 0x7A	; 122
    2056:	55 e4       	ldi	r21, 0x45	; 69
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8d 8b       	std	Y+21, r24	; 0x15
    2062:	9e 8b       	std	Y+22, r25	; 0x16
    2064:	af 8b       	std	Y+23, r26	; 0x17
    2066:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2068:	6d 89       	ldd	r22, Y+21	; 0x15
    206a:	7e 89       	ldd	r23, Y+22	; 0x16
    206c:	8f 89       	ldd	r24, Y+23	; 0x17
    206e:	98 8d       	ldd	r25, Y+24	; 0x18
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <lcd_send_command+0x28a>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9c 8b       	std	Y+20, r25	; 0x14
    2086:	8b 8b       	std	Y+19, r24	; 0x13
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <lcd_send_command+0x308>
	else if (__tmp > 65535)
    208a:	6d 89       	ldd	r22, Y+21	; 0x15
    208c:	7e 89       	ldd	r23, Y+22	; 0x16
    208e:	8f 89       	ldd	r24, Y+23	; 0x17
    2090:	98 8d       	ldd	r25, Y+24	; 0x18
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <lcd_send_command+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	69 8d       	ldd	r22, Y+25	; 0x19
    20a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9c 8b       	std	Y+20, r25	; 0x14
    20c8:	8b 8b       	std	Y+19, r24	; 0x13
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <lcd_send_command+0x2ea>
    20cc:	80 e9       	ldi	r24, 0x90	; 144
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	9a 8b       	std	Y+18, r25	; 0x12
    20d2:	89 8b       	std	Y+17, r24	; 0x11
    20d4:	89 89       	ldd	r24, Y+17	; 0x11
    20d6:	9a 89       	ldd	r25, Y+18	; 0x12
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <lcd_send_command+0x2d8>
    20dc:	9a 8b       	std	Y+18, r25	; 0x12
    20de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	8b 89       	ldd	r24, Y+19	; 0x13
    20e2:	9c 89       	ldd	r25, Y+20	; 0x14
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	9c 8b       	std	Y+20, r25	; 0x14
    20e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	8b 89       	ldd	r24, Y+19	; 0x13
    20ec:	9c 89       	ldd	r25, Y+20	; 0x14
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <lcd_send_command+0x2cc>
    20f2:	14 c0       	rjmp	.+40     	; 0x211c <lcd_send_command+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	6d 89       	ldd	r22, Y+21	; 0x15
    20f6:	7e 89       	ldd	r23, Y+22	; 0x16
    20f8:	8f 89       	ldd	r24, Y+23	; 0x17
    20fa:	98 8d       	ldd	r25, Y+24	; 0x18
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9c 8b       	std	Y+20, r25	; 0x14
    2106:	8b 8b       	std	Y+19, r24	; 0x13
    2108:	8b 89       	ldd	r24, Y+19	; 0x13
    210a:	9c 89       	ldd	r25, Y+20	; 0x14
    210c:	98 8b       	std	Y+16, r25	; 0x10
    210e:	8f 87       	std	Y+15, r24	; 0x0f
    2110:	8f 85       	ldd	r24, Y+15	; 0x0f
    2112:	98 89       	ldd	r25, Y+16	; 0x10
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <lcd_send_command+0x314>
    2118:	98 8b       	std	Y+16, r25	; 0x10
    211a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &= ~(1 << LCD_EN);
    211c:	a8 e3       	ldi	r26, 0x38	; 56
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e8 e3       	ldi	r30, 0x38	; 56
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	87 7f       	andi	r24, 0xF7	; 247
    2128:	8c 93       	st	X, r24
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 ea       	ldi	r26, 0xA0	; 160
    2130:	b0 e4       	ldi	r27, 0x40	; 64
    2132:	8b 87       	std	Y+11, r24	; 0x0b
    2134:	9c 87       	std	Y+12, r25	; 0x0c
    2136:	ad 87       	std	Y+13, r26	; 0x0d
    2138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6b 85       	ldd	r22, Y+11	; 0x0b
    213c:	7c 85       	ldd	r23, Y+12	; 0x0c
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	55 e4       	ldi	r21, 0x45	; 69
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8f 83       	std	Y+7, r24	; 0x07
    2154:	98 87       	std	Y+8, r25	; 0x08
    2156:	a9 87       	std	Y+9, r26	; 0x09
    2158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215a:	6f 81       	ldd	r22, Y+7	; 0x07
    215c:	78 85       	ldd	r23, Y+8	; 0x08
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <lcd_send_command+0x37c>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <lcd_send_command+0x3fa>
	else if (__tmp > 65535)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <lcd_send_command+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <lcd_send_command+0x3dc>
    21be:	80 e9       	ldi	r24, 0x90	; 144
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	9c 83       	std	Y+4, r25	; 0x04
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <lcd_send_command+0x3ca>
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <lcd_send_command+0x3be>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <lcd_send_command+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <lcd_send_command+0x406>
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    220e:	e9 96       	adiw	r28, 0x39	; 57
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <lcd_write_word>:

void lcd_write_word(char word[20])	//printing a full word to the
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <lcd_write_word+0x6>
    2226:	00 d0       	rcall	.+0      	; 0x2228 <lcd_write_word+0x8>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    2230:	1a 82       	std	Y+2, r1	; 0x02
    2232:	19 82       	std	Y+1, r1	; 0x01
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <lcd_write_word+0x34>
	while (word[i] != '\0') {
		lcd_write_character(word[i]);
    2236:	29 81       	ldd	r18, Y+1	; 0x01
    2238:	3a 81       	ldd	r19, Y+2	; 0x02
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	fc 01       	movw	r30, r24
    2240:	e2 0f       	add	r30, r18
    2242:	f3 1f       	adc	r31, r19
    2244:	80 81       	ld	r24, Z
    2246:	0e 94 3b 11 	call	0x2276	; 0x2276 <lcd_write_character>
		i++;
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	9a 81       	ldd	r25, Y+2	; 0x02
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
}

void lcd_write_word(char word[20])	//printing a full word to the
{
	int i = 0;
	while (word[i] != '\0') {
    2254:	29 81       	ldd	r18, Y+1	; 0x01
    2256:	3a 81       	ldd	r19, Y+2	; 0x02
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	fc 01       	movw	r30, r24
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	80 81       	ld	r24, Z
    2264:	88 23       	and	r24, r24
    2266:	39 f7       	brne	.-50     	; 0x2236 <lcd_write_word+0x16>
		lcd_write_character(word[i]);
		i++;
	}
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <lcd_write_character>:

void lcd_write_character(uint8_t character)	//sending one character to LCD
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	e9 97       	sbiw	r28, 0x39	; 57
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	89 af       	std	Y+57, r24	; 0x39

	DATA_BUS_A = ((character & 0b11110000));
    228c:	eb e3       	ldi	r30, 0x3B	; 59
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	89 ad       	ldd	r24, Y+57	; 0x39
    2292:	80 7f       	andi	r24, 0xF0	; 240
    2294:	80 83       	st	Z, r24
	CTL_BUS |= (1 << LCD_RS);
    2296:	a8 e3       	ldi	r26, 0x38	; 56
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e8 e3       	ldi	r30, 0x38	; 56
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	82 60       	ori	r24, 0x02	; 2
    22a2:	8c 93       	st	X, r24
	CTL_BUS |= (1 << LCD_EN);
    22a4:	a8 e3       	ldi	r26, 0x38	; 56
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e8 e3       	ldi	r30, 0x38	; 56
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	88 60       	ori	r24, 0x08	; 8
    22b0:	8c 93       	st	X, r24
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	a0 ea       	ldi	r26, 0xA0	; 160
    22b8:	b0 e4       	ldi	r27, 0x40	; 64
    22ba:	8d ab       	std	Y+53, r24	; 0x35
    22bc:	9e ab       	std	Y+54, r25	; 0x36
    22be:	af ab       	std	Y+55, r26	; 0x37
    22c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c2:	6d a9       	ldd	r22, Y+53	; 0x35
    22c4:	7e a9       	ldd	r23, Y+54	; 0x36
    22c6:	8f a9       	ldd	r24, Y+55	; 0x37
    22c8:	98 ad       	ldd	r25, Y+56	; 0x38
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	4a e7       	ldi	r20, 0x7A	; 122
    22d0:	55 e4       	ldi	r21, 0x45	; 69
    22d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	89 ab       	std	Y+49, r24	; 0x31
    22dc:	9a ab       	std	Y+50, r25	; 0x32
    22de:	ab ab       	std	Y+51, r26	; 0x33
    22e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22e2:	69 a9       	ldd	r22, Y+49	; 0x31
    22e4:	7a a9       	ldd	r23, Y+50	; 0x32
    22e6:	8b a9       	ldd	r24, Y+51	; 0x33
    22e8:	9c a9       	ldd	r25, Y+52	; 0x34
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e8       	ldi	r20, 0x80	; 128
    22f0:	5f e3       	ldi	r21, 0x3F	; 63
    22f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f6:	88 23       	and	r24, r24
    22f8:	2c f4       	brge	.+10     	; 0x2304 <lcd_write_character+0x8e>
		__ticks = 1;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	98 ab       	std	Y+48, r25	; 0x30
    2300:	8f a7       	std	Y+47, r24	; 0x2f
    2302:	3f c0       	rjmp	.+126    	; 0x2382 <lcd_write_character+0x10c>
	else if (__tmp > 65535)
    2304:	69 a9       	ldd	r22, Y+49	; 0x31
    2306:	7a a9       	ldd	r23, Y+50	; 0x32
    2308:	8b a9       	ldd	r24, Y+51	; 0x33
    230a:	9c a9       	ldd	r25, Y+52	; 0x34
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	3f ef       	ldi	r19, 0xFF	; 255
    2310:	4f e7       	ldi	r20, 0x7F	; 127
    2312:	57 e4       	ldi	r21, 0x47	; 71
    2314:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2318:	18 16       	cp	r1, r24
    231a:	4c f5       	brge	.+82     	; 0x236e <lcd_write_character+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231c:	6d a9       	ldd	r22, Y+53	; 0x35
    231e:	7e a9       	ldd	r23, Y+54	; 0x36
    2320:	8f a9       	ldd	r24, Y+55	; 0x37
    2322:	98 ad       	ldd	r25, Y+56	; 0x38
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e2       	ldi	r20, 0x20	; 32
    232a:	51 e4       	ldi	r21, 0x41	; 65
    232c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	98 ab       	std	Y+48, r25	; 0x30
    2342:	8f a7       	std	Y+47, r24	; 0x2f
    2344:	0f c0       	rjmp	.+30     	; 0x2364 <lcd_write_character+0xee>
    2346:	80 e9       	ldi	r24, 0x90	; 144
    2348:	91 e0       	ldi	r25, 0x01	; 1
    234a:	9e a7       	std	Y+46, r25	; 0x2e
    234c:	8d a7       	std	Y+45, r24	; 0x2d
    234e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2350:	9e a5       	ldd	r25, Y+46	; 0x2e
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <lcd_write_character+0xdc>
    2356:	9e a7       	std	Y+46, r25	; 0x2e
    2358:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235a:	8f a5       	ldd	r24, Y+47	; 0x2f
    235c:	98 a9       	ldd	r25, Y+48	; 0x30
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	98 ab       	std	Y+48, r25	; 0x30
    2362:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2364:	8f a5       	ldd	r24, Y+47	; 0x2f
    2366:	98 a9       	ldd	r25, Y+48	; 0x30
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	69 f7       	brne	.-38     	; 0x2346 <lcd_write_character+0xd0>
    236c:	14 c0       	rjmp	.+40     	; 0x2396 <lcd_write_character+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236e:	69 a9       	ldd	r22, Y+49	; 0x31
    2370:	7a a9       	ldd	r23, Y+50	; 0x32
    2372:	8b a9       	ldd	r24, Y+51	; 0x33
    2374:	9c a9       	ldd	r25, Y+52	; 0x34
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	98 ab       	std	Y+48, r25	; 0x30
    2380:	8f a7       	std	Y+47, r24	; 0x2f
    2382:	8f a5       	ldd	r24, Y+47	; 0x2f
    2384:	98 a9       	ldd	r25, Y+48	; 0x30
    2386:	9c a7       	std	Y+44, r25	; 0x2c
    2388:	8b a7       	std	Y+43, r24	; 0x2b
    238a:	8b a5       	ldd	r24, Y+43	; 0x2b
    238c:	9c a5       	ldd	r25, Y+44	; 0x2c
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <lcd_write_character+0x118>
    2392:	9c a7       	std	Y+44, r25	; 0x2c
    2394:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &= ~(1 << LCD_EN);
    2396:	a8 e3       	ldi	r26, 0x38	; 56
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e8 e3       	ldi	r30, 0x38	; 56
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	87 7f       	andi	r24, 0xF7	; 247
    23a2:	8c 93       	st	X, r24
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a0 ea       	ldi	r26, 0xA0	; 160
    23aa:	b0 e4       	ldi	r27, 0x40	; 64
    23ac:	8f a3       	std	Y+39, r24	; 0x27
    23ae:	98 a7       	std	Y+40, r25	; 0x28
    23b0:	a9 a7       	std	Y+41, r26	; 0x29
    23b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b4:	6f a1       	ldd	r22, Y+39	; 0x27
    23b6:	78 a5       	ldd	r23, Y+40	; 0x28
    23b8:	89 a5       	ldd	r24, Y+41	; 0x29
    23ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	4a e7       	ldi	r20, 0x7A	; 122
    23c2:	55 e4       	ldi	r21, 0x45	; 69
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	8b a3       	std	Y+35, r24	; 0x23
    23ce:	9c a3       	std	Y+36, r25	; 0x24
    23d0:	ad a3       	std	Y+37, r26	; 0x25
    23d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23d4:	6b a1       	ldd	r22, Y+35	; 0x23
    23d6:	7c a1       	ldd	r23, Y+36	; 0x24
    23d8:	8d a1       	ldd	r24, Y+37	; 0x25
    23da:	9e a1       	ldd	r25, Y+38	; 0x26
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e8:	88 23       	and	r24, r24
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <lcd_write_character+0x180>
		__ticks = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9a a3       	std	Y+34, r25	; 0x22
    23f2:	89 a3       	std	Y+33, r24	; 0x21
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <lcd_write_character+0x1fe>
	else if (__tmp > 65535)
    23f6:	6b a1       	ldd	r22, Y+35	; 0x23
    23f8:	7c a1       	ldd	r23, Y+36	; 0x24
    23fa:	8d a1       	ldd	r24, Y+37	; 0x25
    23fc:	9e a1       	ldd	r25, Y+38	; 0x26
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	3f ef       	ldi	r19, 0xFF	; 255
    2402:	4f e7       	ldi	r20, 0x7F	; 127
    2404:	57 e4       	ldi	r21, 0x47	; 71
    2406:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240a:	18 16       	cp	r1, r24
    240c:	4c f5       	brge	.+82     	; 0x2460 <lcd_write_character+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240e:	6f a1       	ldd	r22, Y+39	; 0x27
    2410:	78 a5       	ldd	r23, Y+40	; 0x28
    2412:	89 a5       	ldd	r24, Y+41	; 0x29
    2414:	9a a5       	ldd	r25, Y+42	; 0x2a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e2       	ldi	r20, 0x20	; 32
    241c:	51 e4       	ldi	r21, 0x41	; 65
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9a a3       	std	Y+34, r25	; 0x22
    2434:	89 a3       	std	Y+33, r24	; 0x21
    2436:	0f c0       	rjmp	.+30     	; 0x2456 <lcd_write_character+0x1e0>
    2438:	80 e9       	ldi	r24, 0x90	; 144
    243a:	91 e0       	ldi	r25, 0x01	; 1
    243c:	98 a3       	std	Y+32, r25	; 0x20
    243e:	8f 8f       	std	Y+31, r24	; 0x1f
    2440:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2442:	98 a1       	ldd	r25, Y+32	; 0x20
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <lcd_write_character+0x1ce>
    2448:	98 a3       	std	Y+32, r25	; 0x20
    244a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	89 a1       	ldd	r24, Y+33	; 0x21
    244e:	9a a1       	ldd	r25, Y+34	; 0x22
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	9a a3       	std	Y+34, r25	; 0x22
    2454:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	89 a1       	ldd	r24, Y+33	; 0x21
    2458:	9a a1       	ldd	r25, Y+34	; 0x22
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	69 f7       	brne	.-38     	; 0x2438 <lcd_write_character+0x1c2>
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <lcd_write_character+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2460:	6b a1       	ldd	r22, Y+35	; 0x23
    2462:	7c a1       	ldd	r23, Y+36	; 0x24
    2464:	8d a1       	ldd	r24, Y+37	; 0x25
    2466:	9e a1       	ldd	r25, Y+38	; 0x26
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9a a3       	std	Y+34, r25	; 0x22
    2472:	89 a3       	std	Y+33, r24	; 0x21
    2474:	89 a1       	ldd	r24, Y+33	; 0x21
    2476:	9a a1       	ldd	r25, Y+34	; 0x22
    2478:	9e 8f       	std	Y+30, r25	; 0x1e
    247a:	8d 8f       	std	Y+29, r24	; 0x1d
    247c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    247e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <lcd_write_character+0x20a>
    2484:	9e 8f       	std	Y+30, r25	; 0x1e
    2486:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS_A = ((character & 0b00001111) << 4);
    2488:	eb e3       	ldi	r30, 0x3B	; 59
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	89 ad       	ldd	r24, Y+57	; 0x39
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	82 95       	swap	r24
    2494:	92 95       	swap	r25
    2496:	90 7f       	andi	r25, 0xF0	; 240
    2498:	98 27       	eor	r25, r24
    249a:	80 7f       	andi	r24, 0xF0	; 240
    249c:	98 27       	eor	r25, r24
    249e:	80 83       	st	Z, r24
	CTL_BUS |= (1 << LCD_EN);
    24a0:	a8 e3       	ldi	r26, 0x38	; 56
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e8 e3       	ldi	r30, 0x38	; 56
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	88 60       	ori	r24, 0x08	; 8
    24ac:	8c 93       	st	X, r24
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a0 ea       	ldi	r26, 0xA0	; 160
    24b4:	b0 e4       	ldi	r27, 0x40	; 64
    24b6:	89 8f       	std	Y+25, r24	; 0x19
    24b8:	9a 8f       	std	Y+26, r25	; 0x1a
    24ba:	ab 8f       	std	Y+27, r26	; 0x1b
    24bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24be:	69 8d       	ldd	r22, Y+25	; 0x19
    24c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	4a e7       	ldi	r20, 0x7A	; 122
    24cc:	55 e4       	ldi	r21, 0x45	; 69
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	8d 8b       	std	Y+21, r24	; 0x15
    24d8:	9e 8b       	std	Y+22, r25	; 0x16
    24da:	af 8b       	std	Y+23, r26	; 0x17
    24dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24de:	6d 89       	ldd	r22, Y+21	; 0x15
    24e0:	7e 89       	ldd	r23, Y+22	; 0x16
    24e2:	8f 89       	ldd	r24, Y+23	; 0x17
    24e4:	98 8d       	ldd	r25, Y+24	; 0x18
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	2c f4       	brge	.+10     	; 0x2500 <lcd_write_character+0x28a>
		__ticks = 1;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9c 8b       	std	Y+20, r25	; 0x14
    24fc:	8b 8b       	std	Y+19, r24	; 0x13
    24fe:	3f c0       	rjmp	.+126    	; 0x257e <lcd_write_character+0x308>
	else if (__tmp > 65535)
    2500:	6d 89       	ldd	r22, Y+21	; 0x15
    2502:	7e 89       	ldd	r23, Y+22	; 0x16
    2504:	8f 89       	ldd	r24, Y+23	; 0x17
    2506:	98 8d       	ldd	r25, Y+24	; 0x18
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	3f ef       	ldi	r19, 0xFF	; 255
    250c:	4f e7       	ldi	r20, 0x7F	; 127
    250e:	57 e4       	ldi	r21, 0x47	; 71
    2510:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2514:	18 16       	cp	r1, r24
    2516:	4c f5       	brge	.+82     	; 0x256a <lcd_write_character+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2518:	69 8d       	ldd	r22, Y+25	; 0x19
    251a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    251c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    251e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e2       	ldi	r20, 0x20	; 32
    2526:	51 e4       	ldi	r21, 0x41	; 65
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9c 8b       	std	Y+20, r25	; 0x14
    253e:	8b 8b       	std	Y+19, r24	; 0x13
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <lcd_write_character+0x2ea>
    2542:	80 e9       	ldi	r24, 0x90	; 144
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	9a 8b       	std	Y+18, r25	; 0x12
    2548:	89 8b       	std	Y+17, r24	; 0x11
    254a:	89 89       	ldd	r24, Y+17	; 0x11
    254c:	9a 89       	ldd	r25, Y+18	; 0x12
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <lcd_write_character+0x2d8>
    2552:	9a 8b       	std	Y+18, r25	; 0x12
    2554:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	9c 89       	ldd	r25, Y+20	; 0x14
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	9c 8b       	std	Y+20, r25	; 0x14
    255e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2560:	8b 89       	ldd	r24, Y+19	; 0x13
    2562:	9c 89       	ldd	r25, Y+20	; 0x14
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	69 f7       	brne	.-38     	; 0x2542 <lcd_write_character+0x2cc>
    2568:	14 c0       	rjmp	.+40     	; 0x2592 <lcd_write_character+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256a:	6d 89       	ldd	r22, Y+21	; 0x15
    256c:	7e 89       	ldd	r23, Y+22	; 0x16
    256e:	8f 89       	ldd	r24, Y+23	; 0x17
    2570:	98 8d       	ldd	r25, Y+24	; 0x18
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	9c 8b       	std	Y+20, r25	; 0x14
    257c:	8b 8b       	std	Y+19, r24	; 0x13
    257e:	8b 89       	ldd	r24, Y+19	; 0x13
    2580:	9c 89       	ldd	r25, Y+20	; 0x14
    2582:	98 8b       	std	Y+16, r25	; 0x10
    2584:	8f 87       	std	Y+15, r24	; 0x0f
    2586:	8f 85       	ldd	r24, Y+15	; 0x0f
    2588:	98 89       	ldd	r25, Y+16	; 0x10
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <lcd_write_character+0x314>
    258e:	98 8b       	std	Y+16, r25	; 0x10
    2590:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &= ~(1 << LCD_EN);
    2592:	a8 e3       	ldi	r26, 0x38	; 56
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e8 e3       	ldi	r30, 0x38	; 56
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	87 7f       	andi	r24, 0xF7	; 247
    259e:	8c 93       	st	X, r24
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a0 ea       	ldi	r26, 0xA0	; 160
    25a6:	b0 e4       	ldi	r27, 0x40	; 64
    25a8:	8b 87       	std	Y+11, r24	; 0x0b
    25aa:	9c 87       	std	Y+12, r25	; 0x0c
    25ac:	ad 87       	std	Y+13, r26	; 0x0d
    25ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a e7       	ldi	r20, 0x7A	; 122
    25be:	55 e4       	ldi	r21, 0x45	; 69
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8f 83       	std	Y+7, r24	; 0x07
    25ca:	98 87       	std	Y+8, r25	; 0x08
    25cc:	a9 87       	std	Y+9, r26	; 0x09
    25ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e8       	ldi	r20, 0x80	; 128
    25de:	5f e3       	ldi	r21, 0x3F	; 63
    25e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e4:	88 23       	and	r24, r24
    25e6:	2c f4       	brge	.+10     	; 0x25f2 <lcd_write_character+0x37c>
		__ticks = 1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	3f c0       	rjmp	.+126    	; 0x2670 <lcd_write_character+0x3fa>
	else if (__tmp > 65535)
    25f2:	6f 81       	ldd	r22, Y+7	; 0x07
    25f4:	78 85       	ldd	r23, Y+8	; 0x08
    25f6:	89 85       	ldd	r24, Y+9	; 0x09
    25f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	4c f5       	brge	.+82     	; 0x265c <lcd_write_character+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	6b 85       	ldd	r22, Y+11	; 0x0b
    260c:	7c 85       	ldd	r23, Y+12	; 0x0c
    260e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2610:	9e 85       	ldd	r25, Y+14	; 0x0e
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e2       	ldi	r20, 0x20	; 32
    2618:	51 e4       	ldi	r21, 0x41	; 65
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <lcd_write_character+0x3dc>
    2634:	80 e9       	ldi	r24, 0x90	; 144
    2636:	91 e0       	ldi	r25, 0x01	; 1
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <lcd_write_character+0x3ca>
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2648:	8d 81       	ldd	r24, Y+5	; 0x05
    264a:	9e 81       	ldd	r25, Y+6	; 0x06
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	69 f7       	brne	.-38     	; 0x2634 <lcd_write_character+0x3be>
    265a:	14 c0       	rjmp	.+40     	; 0x2684 <lcd_write_character+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <lcd_write_character+0x406>
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2684:	e9 96       	adiw	r28, 0x39	; 57
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <lcd_clear>:

void lcd_clear(void)	//Clearing the lcd screen
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	2e 97       	sbiw	r28, 0x0e	; 14
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <lcd_send_command>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 ea       	ldi	r26, 0xA0	; 160
    26b6:	b0 e4       	ldi	r27, 0x40	; 64
    26b8:	8b 87       	std	Y+11, r24	; 0x0b
    26ba:	9c 87       	std	Y+12, r25	; 0x0c
    26bc:	ad 87       	std	Y+13, r26	; 0x0d
    26be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a e7       	ldi	r20, 0x7A	; 122
    26ce:	55 e4       	ldi	r21, 0x45	; 69
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8f 83       	std	Y+7, r24	; 0x07
    26da:	98 87       	std	Y+8, r25	; 0x08
    26dc:	a9 87       	std	Y+9, r26	; 0x09
    26de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	5f e3       	ldi	r21, 0x3F	; 63
    26f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	2c f4       	brge	.+10     	; 0x2702 <lcd_clear+0x6c>
		__ticks = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	3f c0       	rjmp	.+126    	; 0x2780 <lcd_clear+0xea>
	else if (__tmp > 65535)
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	3f ef       	ldi	r19, 0xFF	; 255
    270e:	4f e7       	ldi	r20, 0x7F	; 127
    2710:	57 e4       	ldi	r21, 0x47	; 71
    2712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2716:	18 16       	cp	r1, r24
    2718:	4c f5       	brge	.+82     	; 0x276c <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	6b 85       	ldd	r22, Y+11	; 0x0b
    271c:	7c 85       	ldd	r23, Y+12	; 0x0c
    271e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2720:	9e 85       	ldd	r25, Y+14	; 0x0e
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
    2742:	0f c0       	rjmp	.+30     	; 0x2762 <lcd_clear+0xcc>
    2744:	80 e9       	ldi	r24, 0x90	; 144
    2746:	91 e0       	ldi	r25, 0x01	; 1
    2748:	9c 83       	std	Y+4, r25	; 0x04
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <lcd_clear+0xba>
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	69 f7       	brne	.-38     	; 0x2744 <lcd_clear+0xae>
    276a:	14 c0       	rjmp	.+40     	; 0x2794 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276c:	6f 81       	ldd	r22, Y+7	; 0x07
    276e:	78 85       	ldd	r23, Y+8	; 0x08
    2770:	89 85       	ldd	r24, Y+9	; 0x09
    2772:	9a 85       	ldd	r25, Y+10	; 0x0a
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	9a 83       	std	Y+2, r25	; 0x02
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <lcd_clear+0xf6>
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2794:	2e 96       	adiw	r28, 0x0e	; 14
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <lcd_goto_xy>:

void lcd_goto_xy(uint8_t line, uint8_t pos)				//line = 0 or 1
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	6a 97       	sbiw	r28, 0x1a	; 26
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	89 8f       	std	Y+25, r24	; 0x19
    27bc:	6a 8f       	std	Y+26, r22	; 0x1a
	lcd_send_command((0x80 | (line << 6)) + pos);
    27be:	89 8d       	ldd	r24, Y+25	; 0x19
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	00 24       	eor	r0, r0
    27c6:	96 95       	lsr	r25
    27c8:	87 95       	ror	r24
    27ca:	07 94       	ror	r0
    27cc:	96 95       	lsr	r25
    27ce:	87 95       	ror	r24
    27d0:	07 94       	ror	r0
    27d2:	98 2f       	mov	r25, r24
    27d4:	80 2d       	mov	r24, r0
    27d6:	80 68       	ori	r24, 0x80	; 128
    27d8:	98 2f       	mov	r25, r24
    27da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27dc:	89 0f       	add	r24, r25
    27de:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <lcd_send_command>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a8 e4       	ldi	r26, 0x48	; 72
    27e8:	b2 e4       	ldi	r27, 0x42	; 66
    27ea:	8d 8b       	std	Y+21, r24	; 0x15
    27ec:	9e 8b       	std	Y+22, r25	; 0x16
    27ee:	af 8b       	std	Y+23, r26	; 0x17
    27f0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27f2:	6d 89       	ldd	r22, Y+21	; 0x15
    27f4:	7e 89       	ldd	r23, Y+22	; 0x16
    27f6:	8f 89       	ldd	r24, Y+23	; 0x17
    27f8:	98 8d       	ldd	r25, Y+24	; 0x18
    27fa:	2b ea       	ldi	r18, 0xAB	; 171
    27fc:	3a ea       	ldi	r19, 0xAA	; 170
    27fe:	4a ea       	ldi	r20, 0xAA	; 170
    2800:	50 e4       	ldi	r21, 0x40	; 64
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	89 8b       	std	Y+17, r24	; 0x11
    280c:	9a 8b       	std	Y+18, r25	; 0x12
    280e:	ab 8b       	std	Y+19, r26	; 0x13
    2810:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2812:	69 89       	ldd	r22, Y+17	; 0x11
    2814:	7a 89       	ldd	r23, Y+18	; 0x12
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	9c 89       	ldd	r25, Y+20	; 0x14
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	5f e3       	ldi	r21, 0x3F	; 63
    2822:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2826:	88 23       	and	r24, r24
    2828:	1c f4       	brge	.+6      	; 0x2830 <lcd_goto_xy+0x8a>
		__ticks = 1;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	88 8b       	std	Y+16, r24	; 0x10
    282e:	91 c0       	rjmp	.+290    	; 0x2952 <lcd_goto_xy+0x1ac>
	else if (__tmp > 255)
    2830:	69 89       	ldd	r22, Y+17	; 0x11
    2832:	7a 89       	ldd	r23, Y+18	; 0x12
    2834:	8b 89       	ldd	r24, Y+19	; 0x13
    2836:	9c 89       	ldd	r25, Y+20	; 0x14
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	4f e7       	ldi	r20, 0x7F	; 127
    283e:	53 e4       	ldi	r21, 0x43	; 67
    2840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2844:	18 16       	cp	r1, r24
    2846:	0c f0       	brlt	.+2      	; 0x284a <lcd_goto_xy+0xa4>
    2848:	7b c0       	rjmp	.+246    	; 0x2940 <lcd_goto_xy+0x19a>
	{
		_delay_ms(__us / 1000.0);
    284a:	6d 89       	ldd	r22, Y+21	; 0x15
    284c:	7e 89       	ldd	r23, Y+22	; 0x16
    284e:	8f 89       	ldd	r24, Y+23	; 0x17
    2850:	98 8d       	ldd	r25, Y+24	; 0x18
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4a e7       	ldi	r20, 0x7A	; 122
    2858:	54 e4       	ldi	r21, 0x44	; 68
    285a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	8c 87       	std	Y+12, r24	; 0x0c
    2864:	9d 87       	std	Y+13, r25	; 0x0d
    2866:	ae 87       	std	Y+14, r26	; 0x0e
    2868:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286a:	6c 85       	ldd	r22, Y+12	; 0x0c
    286c:	7d 85       	ldd	r23, Y+13	; 0x0d
    286e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2870:	9f 85       	ldd	r25, Y+15	; 0x0f
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a e7       	ldi	r20, 0x7A	; 122
    2878:	55 e4       	ldi	r21, 0x45	; 69
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	88 87       	std	Y+8, r24	; 0x08
    2884:	99 87       	std	Y+9, r25	; 0x09
    2886:	aa 87       	std	Y+10, r26	; 0x0a
    2888:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    288a:	68 85       	ldd	r22, Y+8	; 0x08
    288c:	79 85       	ldd	r23, Y+9	; 0x09
    288e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2890:	9b 85       	ldd	r25, Y+11	; 0x0b
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e8       	ldi	r20, 0x80	; 128
    2898:	5f e3       	ldi	r21, 0x3F	; 63
    289a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289e:	88 23       	and	r24, r24
    28a0:	2c f4       	brge	.+10     	; 0x28ac <lcd_goto_xy+0x106>
		__ticks = 1;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9f 83       	std	Y+7, r25	; 0x07
    28a8:	8e 83       	std	Y+6, r24	; 0x06
    28aa:	3f c0       	rjmp	.+126    	; 0x292a <lcd_goto_xy+0x184>
	else if (__tmp > 65535)
    28ac:	68 85       	ldd	r22, Y+8	; 0x08
    28ae:	79 85       	ldd	r23, Y+9	; 0x09
    28b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	3f ef       	ldi	r19, 0xFF	; 255
    28b8:	4f e7       	ldi	r20, 0x7F	; 127
    28ba:	57 e4       	ldi	r21, 0x47	; 71
    28bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c0:	18 16       	cp	r1, r24
    28c2:	4c f5       	brge	.+82     	; 0x2916 <lcd_goto_xy+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    28c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    28c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	51 e4       	ldi	r21, 0x41	; 65
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9f 83       	std	Y+7, r25	; 0x07
    28ea:	8e 83       	std	Y+6, r24	; 0x06
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <lcd_goto_xy+0x166>
    28ee:	80 e9       	ldi	r24, 0x90	; 144
    28f0:	91 e0       	ldi	r25, 0x01	; 1
    28f2:	9d 83       	std	Y+5, r25	; 0x05
    28f4:	8c 83       	std	Y+4, r24	; 0x04
    28f6:	8c 81       	ldd	r24, Y+4	; 0x04
    28f8:	9d 81       	ldd	r25, Y+5	; 0x05
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <lcd_goto_xy+0x154>
    28fe:	9d 83       	std	Y+5, r25	; 0x05
    2900:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2902:	8e 81       	ldd	r24, Y+6	; 0x06
    2904:	9f 81       	ldd	r25, Y+7	; 0x07
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	9f 83       	std	Y+7, r25	; 0x07
    290a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	8e 81       	ldd	r24, Y+6	; 0x06
    290e:	9f 81       	ldd	r25, Y+7	; 0x07
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	69 f7       	brne	.-38     	; 0x28ee <lcd_goto_xy+0x148>
    2914:	24 c0       	rjmp	.+72     	; 0x295e <lcd_goto_xy+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2916:	68 85       	ldd	r22, Y+8	; 0x08
    2918:	79 85       	ldd	r23, Y+9	; 0x09
    291a:	8a 85       	ldd	r24, Y+10	; 0x0a
    291c:	9b 85       	ldd	r25, Y+11	; 0x0b
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9f 83       	std	Y+7, r25	; 0x07
    2928:	8e 83       	std	Y+6, r24	; 0x06
    292a:	8e 81       	ldd	r24, Y+6	; 0x06
    292c:	9f 81       	ldd	r25, Y+7	; 0x07
    292e:	9b 83       	std	Y+3, r25	; 0x03
    2930:	8a 83       	std	Y+2, r24	; 0x02
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	9b 81       	ldd	r25, Y+3	; 0x03
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <lcd_goto_xy+0x190>
    293a:	9b 83       	std	Y+3, r25	; 0x03
    293c:	8a 83       	std	Y+2, r24	; 0x02
    293e:	0f c0       	rjmp	.+30     	; 0x295e <lcd_goto_xy+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2940:	69 89       	ldd	r22, Y+17	; 0x11
    2942:	7a 89       	ldd	r23, Y+18	; 0x12
    2944:	8b 89       	ldd	r24, Y+19	; 0x13
    2946:	9c 89       	ldd	r25, Y+20	; 0x14
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	88 8b       	std	Y+16, r24	; 0x10
    2952:	88 89       	ldd	r24, Y+16	; 0x10
    2954:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	8a 95       	dec	r24
    295a:	f1 f7       	brne	.-4      	; 0x2958 <lcd_goto_xy+0x1b2>
    295c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    295e:	6a 96       	adiw	r28, 0x1a	; 26
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <forward>:
 *      Author: FADY
 */

#include "DC.h"

void forward (void){	//set motor to move forward
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
	Dio_write(H_A1, HIGH);
    2978:	83 e1       	ldi	r24, 0x13	; 19
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A3, HIGH);
    2980:	85 e1       	ldi	r24, 0x15	; 21
    2982:	61 e0       	ldi	r22, 0x01	; 1
    2984:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A2, LOW);
    2988:	84 e1       	ldi	r24, 0x14	; 20
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A4, LOW);
    2990:	86 e1       	ldi	r24, 0x16	; 22
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <backward>:

void backward (void){//set motor to move backward
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
	Dio_write(H_A1, LOW);
    29a6:	83 e1       	ldi	r24, 0x13	; 19
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A3, LOW);
    29ae:	85 e1       	ldi	r24, 0x15	; 21
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A2, HIGH);
    29b6:	84 e1       	ldi	r24, 0x14	; 20
    29b8:	61 e0       	ldi	r22, 0x01	; 1
    29ba:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A4, HIGH);
    29be:	86 e1       	ldi	r24, 0x16	; 22
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>

}
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <left>:

void left (void){//set motor to move left
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
	Dio_write(H_A1, HIGH);
    29d4:	83 e1       	ldi	r24, 0x13	; 19
    29d6:	61 e0       	ldi	r22, 0x01	; 1
    29d8:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A3, LOW);
    29dc:	85 e1       	ldi	r24, 0x15	; 21
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A2, LOW);
    29e4:	84 e1       	ldi	r24, 0x14	; 20
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A4, HIGH);
    29ec:	86 e1       	ldi	r24, 0x16	; 22
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>

}
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <right>:

void right (void){//set motor to move right
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
	Dio_write(H_A1, LOW);
    2a02:	83 e1       	ldi	r24, 0x13	; 19
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A3, HIGH);
    2a0a:	85 e1       	ldi	r24, 0x15	; 21
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A2, HIGH);
    2a12:	84 e1       	ldi	r24, 0x14	; 20
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A4, LOW);
    2a1a:	86 e1       	ldi	r24, 0x16	; 22
    2a1c:	60 e0       	ldi	r22, 0x00	; 0
    2a1e:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>

}
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <stop>:

void stop (void){//set motor to stop moving
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
	Dio_write(H_A1, LOW);
    2a30:	83 e1       	ldi	r24, 0x13	; 19
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A3, LOW);
    2a38:	85 e1       	ldi	r24, 0x15	; 21
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A2, LOW);
    2a40:	84 e1       	ldi	r24, 0x14	; 20
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(H_A4, LOW);
    2a48:	86 e1       	ldi	r24, 0x16	; 22
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>

}
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <main>:
#include "HAL/ultrasonic/ultrasonic.h"
#include "HAL/DC/DC.h"

extern uint32_t distance;

int main() {
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	c0 5e       	subi	r28, 0xE0	; 224
    2a64:	d0 40       	sbci	r29, 0x00	; 0
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
	Dio_init();				//initialize dio
    2a70:	0e 94 57 07 	call	0xeae	; 0xeae <Dio_init>
	lcd_init();				//initialize LCD
    2a74:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <lcd_init>
	ultrasonic_init();		//initialize ultrasonic
    2a78:	0e 94 37 0a 	call	0x146e	; 0x146e <ultrasonic_init>
	tim1_pwm();				//initialize servo
    2a7c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <tim1_pwm>
	sei();
    2a80:	78 94       	sei

	//initial states for start up
	Dio_write(SS, HIGH);		//set H enable 1 (named according to the name of pin on board)
    2a82:	8c e0       	ldi	r24, 0x0C	; 12
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	Dio_write(MOSI, HIGH);		//set H enable 2 (named according to the name of pin on board)
    2a8a:	8d e0       	ldi	r24, 0x0D	; 13
    2a8c:	61 e0       	ldi	r22, 0x01	; 1
    2a8e:	0e 94 c7 08 	call	0x118e	; 0x118e <Dio_write>
	servo_write(90);			//set servo initial angle
    2a92:	8a e5       	ldi	r24, 0x5A	; 90
    2a94:	0e 94 c5 0c 	call	0x198a	; 0x198a <servo_write>
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e3 52       	subi	r30, 0x23	; 35
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	aa ef       	ldi	r26, 0xFA	; 250
    2aa4:	b3 e4       	ldi	r27, 0x43	; 67
    2aa6:	80 83       	st	Z, r24
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	a2 83       	std	Z+2, r26	; 0x02
    2aac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	8e 01       	movw	r16, r28
    2ab0:	07 52       	subi	r16, 0x27	; 39
    2ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e3 52       	subi	r30, 0x23	; 35
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4a e7       	ldi	r20, 0x7A	; 122
    2ac8:	55 e4       	ldi	r21, 0x45	; 69
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	80 83       	st	Z, r24
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	a2 83       	std	Z+2, r26	; 0x02
    2ada:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2adc:	fe 01       	movw	r30, r28
    2ade:	e7 52       	subi	r30, 0x27	; 39
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	60 81       	ld	r22, Z
    2ae4:	71 81       	ldd	r23, Z+1	; 0x01
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f e3       	ldi	r21, 0x3F	; 63
    2af2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2af6:	88 23       	and	r24, r24
    2af8:	44 f4       	brge	.+16     	; 0x2b0a <main+0xb4>
		__ticks = 1;
    2afa:	fe 01       	movw	r30, r28
    2afc:	e9 52       	subi	r30, 0x29	; 41
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	80 83       	st	Z, r24
    2b08:	64 c0       	rjmp	.+200    	; 0x2bd2 <main+0x17c>
	else if (__tmp > 65535)
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e7 52       	subi	r30, 0x27	; 39
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	60 81       	ld	r22, Z
    2b12:	71 81       	ldd	r23, Z+1	; 0x01
    2b14:	82 81       	ldd	r24, Z+2	; 0x02
    2b16:	93 81       	ldd	r25, Z+3	; 0x03
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b24:	18 16       	cp	r1, r24
    2b26:	0c f0       	brlt	.+2      	; 0x2b2a <main+0xd4>
    2b28:	43 c0       	rjmp	.+134    	; 0x2bb0 <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e3 52       	subi	r30, 0x23	; 35
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	60 81       	ld	r22, Z
    2b32:	71 81       	ldd	r23, Z+1	; 0x01
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	93 81       	ldd	r25, Z+3	; 0x03
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8e 01       	movw	r16, r28
    2b4a:	09 52       	subi	r16, 0x29	; 41
    2b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	80 83       	st	Z, r24
    2b60:	1f c0       	rjmp	.+62     	; 0x2ba0 <main+0x14a>
    2b62:	fe 01       	movw	r30, r28
    2b64:	eb 52       	subi	r30, 0x2B	; 43
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	80 e9       	ldi	r24, 0x90	; 144
    2b6a:	91 e0       	ldi	r25, 0x01	; 1
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b70:	fe 01       	movw	r30, r28
    2b72:	eb 52       	subi	r30, 0x2B	; 43
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <main+0x124>
    2b7e:	fe 01       	movw	r30, r28
    2b80:	eb 52       	subi	r30, 0x2B	; 43
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	de 01       	movw	r26, r28
    2b8a:	a9 52       	subi	r26, 0x29	; 41
    2b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e9 52       	subi	r30, 0x29	; 41
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	11 96       	adiw	r26, 0x01	; 1
    2b9c:	9c 93       	st	X, r25
    2b9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e9 52       	subi	r30, 0x29	; 41
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	91 81       	ldd	r25, Z+1	; 0x01
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	d1 f6       	brne	.-76     	; 0x2b62 <main+0x10c>
    2bae:	27 c0       	rjmp	.+78     	; 0x2bfe <main+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb0:	8e 01       	movw	r16, r28
    2bb2:	09 52       	subi	r16, 0x29	; 41
    2bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e7 52       	subi	r30, 0x27	; 39
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	f8 01       	movw	r30, r16
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
    2bd2:	de 01       	movw	r26, r28
    2bd4:	ad 52       	subi	r26, 0x2D	; 45
    2bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e9 52       	subi	r30, 0x29	; 41
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	8d 93       	st	X+, r24
    2be4:	9c 93       	st	X, r25
    2be6:	fe 01       	movw	r30, r28
    2be8:	ed 52       	subi	r30, 0x2D	; 45
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <main+0x19a>
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	ed 52       	subi	r30, 0x2D	; 45
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	80 83       	st	Z, r24
	_delay_ms(500);

	while (1) {
		ultra_triger();			//take reading of ultrasonic and print on LCD
    2bfe:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <ultra_triger>
    2c02:	fe 01       	movw	r30, r28
    2c04:	e1 53       	subi	r30, 0x31	; 49
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	a0 e7       	ldi	r26, 0x70	; 112
    2c0e:	b1 e4       	ldi	r27, 0x41	; 65
    2c10:	80 83       	st	Z, r24
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	a2 83       	std	Z+2, r26	; 0x02
    2c16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c18:	8e 01       	movw	r16, r28
    2c1a:	05 53       	subi	r16, 0x35	; 53
    2c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e1 53       	subi	r30, 0x31	; 49
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	4a e7       	ldi	r20, 0x7A	; 122
    2c32:	55 e4       	ldi	r21, 0x45	; 69
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	80 83       	st	Z, r24
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	a2 83       	std	Z+2, r26	; 0x02
    2c44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c46:	fe 01       	movw	r30, r28
    2c48:	e5 53       	subi	r30, 0x35	; 53
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e8       	ldi	r20, 0x80	; 128
    2c5a:	5f e3       	ldi	r21, 0x3F	; 63
    2c5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c60:	88 23       	and	r24, r24
    2c62:	44 f4       	brge	.+16     	; 0x2c74 <main+0x21e>
		__ticks = 1;
    2c64:	fe 01       	movw	r30, r28
    2c66:	e7 53       	subi	r30, 0x37	; 55
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	80 83       	st	Z, r24
    2c72:	64 c0       	rjmp	.+200    	; 0x2d3c <main+0x2e6>
	else if (__tmp > 65535)
    2c74:	fe 01       	movw	r30, r28
    2c76:	e5 53       	subi	r30, 0x35	; 53
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	3f ef       	ldi	r19, 0xFF	; 255
    2c86:	4f e7       	ldi	r20, 0x7F	; 127
    2c88:	57 e4       	ldi	r21, 0x47	; 71
    2c8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	0c f0       	brlt	.+2      	; 0x2c94 <main+0x23e>
    2c92:	43 c0       	rjmp	.+134    	; 0x2d1a <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c94:	fe 01       	movw	r30, r28
    2c96:	e1 53       	subi	r30, 0x31	; 49
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e2       	ldi	r20, 0x20	; 32
    2ca8:	51 e4       	ldi	r21, 0x41	; 65
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	8e 01       	movw	r16, r28
    2cb4:	07 53       	subi	r16, 0x37	; 55
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	f8 01       	movw	r30, r16
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	80 83       	st	Z, r24
    2cca:	1f c0       	rjmp	.+62     	; 0x2d0a <main+0x2b4>
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e9 53       	subi	r30, 0x39	; 57
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 e9       	ldi	r24, 0x90	; 144
    2cd4:	91 e0       	ldi	r25, 0x01	; 1
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	80 83       	st	Z, r24
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e9 53       	subi	r30, 0x39	; 57
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	91 81       	ldd	r25, Z+1	; 0x01
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <main+0x28e>
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e9 53       	subi	r30, 0x39	; 57
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf2:	de 01       	movw	r26, r28
    2cf4:	a7 53       	subi	r26, 0x37	; 55
    2cf6:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	e7 53       	subi	r30, 0x37	; 55
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	80 81       	ld	r24, Z
    2d00:	91 81       	ldd	r25, Z+1	; 0x01
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	11 96       	adiw	r26, 0x01	; 1
    2d06:	9c 93       	st	X, r25
    2d08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e7 53       	subi	r30, 0x37	; 55
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	91 81       	ldd	r25, Z+1	; 0x01
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	d1 f6       	brne	.-76     	; 0x2ccc <main+0x276>
    2d18:	27 c0       	rjmp	.+78     	; 0x2d68 <main+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1a:	8e 01       	movw	r16, r28
    2d1c:	07 53       	subi	r16, 0x37	; 55
    2d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d20:	fe 01       	movw	r30, r28
    2d22:	e5 53       	subi	r30, 0x35	; 53
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	f8 01       	movw	r30, r16
    2d38:	91 83       	std	Z+1, r25	; 0x01
    2d3a:	80 83       	st	Z, r24
    2d3c:	de 01       	movw	r26, r28
    2d3e:	ab 53       	subi	r26, 0x3B	; 59
    2d40:	bf 4f       	sbci	r27, 0xFF	; 255
    2d42:	fe 01       	movw	r30, r28
    2d44:	e7 53       	subi	r30, 0x37	; 55
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	8d 93       	st	X+, r24
    2d4e:	9c 93       	st	X, r25
    2d50:	fe 01       	movw	r30, r28
    2d52:	eb 53       	subi	r30, 0x3B	; 59
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <main+0x304>
    2d5e:	fe 01       	movw	r30, r28
    2d60:	eb 53       	subi	r30, 0x3B	; 59
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	91 83       	std	Z+1, r25	; 0x01
    2d66:	80 83       	st	Z, r24
		_delay_ms(15);
		servo_write(90);
    2d68:	8a e5       	ldi	r24, 0x5A	; 90
    2d6a:	0e 94 c5 0c 	call	0x198a	; 0x198a <servo_write>
		forward();
    2d6e:	0e 94 b8 14 	call	0x2970	; 0x2970 <forward>
    2d72:	fe 01       	movw	r30, r28
    2d74:	ef 53       	subi	r30, 0x3F	; 63
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	a8 ec       	ldi	r26, 0xC8	; 200
    2d7e:	b2 e4       	ldi	r27, 0x42	; 66
    2d80:	80 83       	st	Z, r24
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	a2 83       	std	Z+2, r26	; 0x02
    2d86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d88:	8e 01       	movw	r16, r28
    2d8a:	03 54       	subi	r16, 0x43	; 67
    2d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ef 53       	subi	r30, 0x3F	; 63
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	60 81       	ld	r22, Z
    2d96:	71 81       	ldd	r23, Z+1	; 0x01
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4a e7       	ldi	r20, 0x7A	; 122
    2da2:	55 e4       	ldi	r21, 0x45	; 69
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	f8 01       	movw	r30, r16
    2dae:	80 83       	st	Z, r24
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	a2 83       	std	Z+2, r26	; 0x02
    2db4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2db6:	fe 01       	movw	r30, r28
    2db8:	e3 54       	subi	r30, 0x43	; 67
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e8       	ldi	r20, 0x80	; 128
    2dca:	5f e3       	ldi	r21, 0x3F	; 63
    2dcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd0:	88 23       	and	r24, r24
    2dd2:	44 f4       	brge	.+16     	; 0x2de4 <main+0x38e>
		__ticks = 1;
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e5 54       	subi	r30, 0x45	; 69
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	80 83       	st	Z, r24
    2de2:	64 c0       	rjmp	.+200    	; 0x2eac <main+0x456>
	else if (__tmp > 65535)
    2de4:	fe 01       	movw	r30, r28
    2de6:	e3 54       	subi	r30, 0x43	; 67
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	93 81       	ldd	r25, Z+3	; 0x03
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	3f ef       	ldi	r19, 0xFF	; 255
    2df6:	4f e7       	ldi	r20, 0x7F	; 127
    2df8:	57 e4       	ldi	r21, 0x47	; 71
    2dfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfe:	18 16       	cp	r1, r24
    2e00:	0c f0       	brlt	.+2      	; 0x2e04 <main+0x3ae>
    2e02:	43 c0       	rjmp	.+134    	; 0x2e8a <main+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e04:	fe 01       	movw	r30, r28
    2e06:	ef 53       	subi	r30, 0x3F	; 63
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e2       	ldi	r20, 0x20	; 32
    2e18:	51 e4       	ldi	r21, 0x41	; 65
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	8e 01       	movw	r16, r28
    2e24:	05 54       	subi	r16, 0x45	; 69
    2e26:	1f 4f       	sbci	r17, 0xFF	; 255
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	f8 01       	movw	r30, r16
    2e36:	91 83       	std	Z+1, r25	; 0x01
    2e38:	80 83       	st	Z, r24
    2e3a:	1f c0       	rjmp	.+62     	; 0x2e7a <main+0x424>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e7 54       	subi	r30, 0x47	; 71
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 e9       	ldi	r24, 0x90	; 144
    2e44:	91 e0       	ldi	r25, 0x01	; 1
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	80 83       	st	Z, r24
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e7 54       	subi	r30, 0x47	; 71
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <main+0x3fe>
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e7 54       	subi	r30, 0x47	; 71
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	de 01       	movw	r26, r28
    2e64:	a5 54       	subi	r26, 0x45	; 69
    2e66:	bf 4f       	sbci	r27, 0xFF	; 255
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e5 54       	subi	r30, 0x45	; 69
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	11 96       	adiw	r26, 0x01	; 1
    2e76:	9c 93       	st	X, r25
    2e78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	e5 54       	subi	r30, 0x45	; 69
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	80 81       	ld	r24, Z
    2e82:	91 81       	ldd	r25, Z+1	; 0x01
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	d1 f6       	brne	.-76     	; 0x2e3c <main+0x3e6>
    2e88:	27 c0       	rjmp	.+78     	; 0x2ed8 <main+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8a:	8e 01       	movw	r16, r28
    2e8c:	05 54       	subi	r16, 0x45	; 69
    2e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e90:	fe 01       	movw	r30, r28
    2e92:	e3 54       	subi	r30, 0x43	; 67
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	60 81       	ld	r22, Z
    2e98:	71 81       	ldd	r23, Z+1	; 0x01
    2e9a:	82 81       	ldd	r24, Z+2	; 0x02
    2e9c:	93 81       	ldd	r25, Z+3	; 0x03
    2e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	f8 01       	movw	r30, r16
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	80 83       	st	Z, r24
    2eac:	de 01       	movw	r26, r28
    2eae:	a9 54       	subi	r26, 0x49	; 73
    2eb0:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e5 54       	subi	r30, 0x45	; 69
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	8d 93       	st	X+, r24
    2ebe:	9c 93       	st	X, r25
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e9 54       	subi	r30, 0x49	; 73
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <main+0x474>
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e9 54       	subi	r30, 0x49	; 73
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	80 83       	st	Z, r24
		_delay_ms(100);

		if (distance <= 20) {
    2ed8:	80 91 f2 01 	lds	r24, 0x01F2
    2edc:	90 91 f3 01 	lds	r25, 0x01F3
    2ee0:	a0 91 f4 01 	lds	r26, 0x01F4
    2ee4:	b0 91 f5 01 	lds	r27, 0x01F5
    2ee8:	85 31       	cpi	r24, 0x15	; 21
    2eea:	91 05       	cpc	r25, r1
    2eec:	a1 05       	cpc	r26, r1
    2eee:	b1 05       	cpc	r27, r1
    2ef0:	10 f0       	brcs	.+4      	; 0x2ef6 <main+0x4a0>
    2ef2:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <main+0x1454>
			lcd_clear();
    2ef6:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
			lcd_write_word("obstacle detected");
    2efa:	85 e6       	ldi	r24, 0x65	; 101
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 10 11 	call	0x2220	; 0x2220 <lcd_write_word>
    2f02:	fe 01       	movw	r30, r28
    2f04:	ed 54       	subi	r30, 0x4D	; 77
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 e2       	ldi	r26, 0x20	; 32
    2f0e:	b1 e4       	ldi	r27, 0x41	; 65
    2f10:	80 83       	st	Z, r24
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	a2 83       	std	Z+2, r26	; 0x02
    2f16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f18:	8e 01       	movw	r16, r28
    2f1a:	01 55       	subi	r16, 0x51	; 81
    2f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ed 54       	subi	r30, 0x4D	; 77
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	60 81       	ld	r22, Z
    2f26:	71 81       	ldd	r23, Z+1	; 0x01
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	93 81       	ldd	r25, Z+3	; 0x03
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	4a e7       	ldi	r20, 0x7A	; 122
    2f32:	55 e4       	ldi	r21, 0x45	; 69
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	f8 01       	movw	r30, r16
    2f3e:	80 83       	st	Z, r24
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	a2 83       	std	Z+2, r26	; 0x02
    2f44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f46:	fe 01       	movw	r30, r28
    2f48:	e1 55       	subi	r30, 0x51	; 81
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	60 81       	ld	r22, Z
    2f4e:	71 81       	ldd	r23, Z+1	; 0x01
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e8       	ldi	r20, 0x80	; 128
    2f5a:	5f e3       	ldi	r21, 0x3F	; 63
    2f5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f60:	88 23       	and	r24, r24
    2f62:	44 f4       	brge	.+16     	; 0x2f74 <main+0x51e>
		__ticks = 1;
    2f64:	fe 01       	movw	r30, r28
    2f66:	e3 55       	subi	r30, 0x53	; 83
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
    2f72:	64 c0       	rjmp	.+200    	; 0x303c <main+0x5e6>
	else if (__tmp > 65535)
    2f74:	fe 01       	movw	r30, r28
    2f76:	e1 55       	subi	r30, 0x51	; 81
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	3f ef       	ldi	r19, 0xFF	; 255
    2f86:	4f e7       	ldi	r20, 0x7F	; 127
    2f88:	57 e4       	ldi	r21, 0x47	; 71
    2f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8e:	18 16       	cp	r1, r24
    2f90:	0c f0       	brlt	.+2      	; 0x2f94 <main+0x53e>
    2f92:	43 c0       	rjmp	.+134    	; 0x301a <main+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f94:	fe 01       	movw	r30, r28
    2f96:	ed 54       	subi	r30, 0x4D	; 77
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	60 81       	ld	r22, Z
    2f9c:	71 81       	ldd	r23, Z+1	; 0x01
    2f9e:	82 81       	ldd	r24, Z+2	; 0x02
    2fa0:	93 81       	ldd	r25, Z+3	; 0x03
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e2       	ldi	r20, 0x20	; 32
    2fa8:	51 e4       	ldi	r21, 0x41	; 65
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	8e 01       	movw	r16, r28
    2fb4:	03 55       	subi	r16, 0x53	; 83
    2fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb8:	bc 01       	movw	r22, r24
    2fba:	cd 01       	movw	r24, r26
    2fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	f8 01       	movw	r30, r16
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
    2fca:	1f c0       	rjmp	.+62     	; 0x300a <main+0x5b4>
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e5 55       	subi	r30, 0x55	; 85
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	80 e9       	ldi	r24, 0x90	; 144
    2fd4:	91 e0       	ldi	r25, 0x01	; 1
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	80 83       	st	Z, r24
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e5 55       	subi	r30, 0x55	; 85
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <main+0x58e>
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e5 55       	subi	r30, 0x55	; 85
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff2:	de 01       	movw	r26, r28
    2ff4:	a3 55       	subi	r26, 0x53	; 83
    2ff6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e3 55       	subi	r30, 0x53	; 83
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	11 96       	adiw	r26, 0x01	; 1
    3006:	9c 93       	st	X, r25
    3008:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300a:	fe 01       	movw	r30, r28
    300c:	e3 55       	subi	r30, 0x53	; 83
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	d1 f6       	brne	.-76     	; 0x2fcc <main+0x576>
    3018:	27 c0       	rjmp	.+78     	; 0x3068 <main+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301a:	8e 01       	movw	r16, r28
    301c:	03 55       	subi	r16, 0x53	; 83
    301e:	1f 4f       	sbci	r17, 0xFF	; 255
    3020:	fe 01       	movw	r30, r28
    3022:	e1 55       	subi	r30, 0x51	; 81
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	60 81       	ld	r22, Z
    3028:	71 81       	ldd	r23, Z+1	; 0x01
    302a:	82 81       	ldd	r24, Z+2	; 0x02
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	f8 01       	movw	r30, r16
    3038:	91 83       	std	Z+1, r25	; 0x01
    303a:	80 83       	st	Z, r24
    303c:	de 01       	movw	r26, r28
    303e:	a7 55       	subi	r26, 0x57	; 87
    3040:	bf 4f       	sbci	r27, 0xFF	; 255
    3042:	fe 01       	movw	r30, r28
    3044:	e3 55       	subi	r30, 0x53	; 83
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	80 81       	ld	r24, Z
    304a:	91 81       	ldd	r25, Z+1	; 0x01
    304c:	8d 93       	st	X+, r24
    304e:	9c 93       	st	X, r25
    3050:	fe 01       	movw	r30, r28
    3052:	e7 55       	subi	r30, 0x57	; 87
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	91 81       	ldd	r25, Z+1	; 0x01
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <main+0x604>
    305e:	fe 01       	movw	r30, r28
    3060:	e7 55       	subi	r30, 0x57	; 87
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	80 83       	st	Z, r24
			_delay_ms(10);
			stop();
    3068:	0e 94 14 15 	call	0x2a28	; 0x2a28 <stop>
			servo_write(45);		//look left
    306c:	8d e2       	ldi	r24, 0x2D	; 45
    306e:	0e 94 c5 0c 	call	0x198a	; 0x198a <servo_write>
    3072:	fe 01       	movw	r30, r28
    3074:	eb 55       	subi	r30, 0x5B	; 91
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	aa e7       	ldi	r26, 0x7A	; 122
    307e:	b4 e4       	ldi	r27, 0x44	; 68
    3080:	80 83       	st	Z, r24
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	a2 83       	std	Z+2, r26	; 0x02
    3086:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3088:	8e 01       	movw	r16, r28
    308a:	0f 55       	subi	r16, 0x5F	; 95
    308c:	1f 4f       	sbci	r17, 0xFF	; 255
    308e:	fe 01       	movw	r30, r28
    3090:	eb 55       	subi	r30, 0x5B	; 91
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	4a e7       	ldi	r20, 0x7A	; 122
    30a2:	55 e4       	ldi	r21, 0x45	; 69
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	f8 01       	movw	r30, r16
    30ae:	80 83       	st	Z, r24
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	a2 83       	std	Z+2, r26	; 0x02
    30b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30b6:	fe 01       	movw	r30, r28
    30b8:	ef 55       	subi	r30, 0x5F	; 95
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	60 81       	ld	r22, Z
    30be:	71 81       	ldd	r23, Z+1	; 0x01
    30c0:	82 81       	ldd	r24, Z+2	; 0x02
    30c2:	93 81       	ldd	r25, Z+3	; 0x03
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 e8       	ldi	r20, 0x80	; 128
    30ca:	5f e3       	ldi	r21, 0x3F	; 63
    30cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30d0:	88 23       	and	r24, r24
    30d2:	44 f4       	brge	.+16     	; 0x30e4 <main+0x68e>
		__ticks = 1;
    30d4:	fe 01       	movw	r30, r28
    30d6:	e1 56       	subi	r30, 0x61	; 97
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	80 83       	st	Z, r24
    30e2:	64 c0       	rjmp	.+200    	; 0x31ac <main+0x756>
	else if (__tmp > 65535)
    30e4:	fe 01       	movw	r30, r28
    30e6:	ef 55       	subi	r30, 0x5F	; 95
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	60 81       	ld	r22, Z
    30ec:	71 81       	ldd	r23, Z+1	; 0x01
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	3f ef       	ldi	r19, 0xFF	; 255
    30f6:	4f e7       	ldi	r20, 0x7F	; 127
    30f8:	57 e4       	ldi	r21, 0x47	; 71
    30fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30fe:	18 16       	cp	r1, r24
    3100:	0c f0       	brlt	.+2      	; 0x3104 <main+0x6ae>
    3102:	43 c0       	rjmp	.+134    	; 0x318a <main+0x734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3104:	fe 01       	movw	r30, r28
    3106:	eb 55       	subi	r30, 0x5B	; 91
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	60 81       	ld	r22, Z
    310c:	71 81       	ldd	r23, Z+1	; 0x01
    310e:	82 81       	ldd	r24, Z+2	; 0x02
    3110:	93 81       	ldd	r25, Z+3	; 0x03
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e2       	ldi	r20, 0x20	; 32
    3118:	51 e4       	ldi	r21, 0x41	; 65
    311a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	8e 01       	movw	r16, r28
    3124:	01 56       	subi	r16, 0x61	; 97
    3126:	1f 4f       	sbci	r17, 0xFF	; 255
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	f8 01       	movw	r30, r16
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	80 83       	st	Z, r24
    313a:	1f c0       	rjmp	.+62     	; 0x317a <main+0x724>
    313c:	fe 01       	movw	r30, r28
    313e:	e3 56       	subi	r30, 0x63	; 99
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	80 e9       	ldi	r24, 0x90	; 144
    3144:	91 e0       	ldi	r25, 0x01	; 1
    3146:	91 83       	std	Z+1, r25	; 0x01
    3148:	80 83       	st	Z, r24
    314a:	fe 01       	movw	r30, r28
    314c:	e3 56       	subi	r30, 0x63	; 99
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	80 81       	ld	r24, Z
    3152:	91 81       	ldd	r25, Z+1	; 0x01
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <main+0x6fe>
    3158:	fe 01       	movw	r30, r28
    315a:	e3 56       	subi	r30, 0x63	; 99
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3162:	de 01       	movw	r26, r28
    3164:	a1 56       	subi	r26, 0x61	; 97
    3166:	bf 4f       	sbci	r27, 0xFF	; 255
    3168:	fe 01       	movw	r30, r28
    316a:	e1 56       	subi	r30, 0x61	; 97
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	80 81       	ld	r24, Z
    3170:	91 81       	ldd	r25, Z+1	; 0x01
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	11 96       	adiw	r26, 0x01	; 1
    3176:	9c 93       	st	X, r25
    3178:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317a:	fe 01       	movw	r30, r28
    317c:	e1 56       	subi	r30, 0x61	; 97
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	d1 f6       	brne	.-76     	; 0x313c <main+0x6e6>
    3188:	27 c0       	rjmp	.+78     	; 0x31d8 <main+0x782>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318a:	8e 01       	movw	r16, r28
    318c:	01 56       	subi	r16, 0x61	; 97
    318e:	1f 4f       	sbci	r17, 0xFF	; 255
    3190:	fe 01       	movw	r30, r28
    3192:	ef 55       	subi	r30, 0x5F	; 95
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	60 81       	ld	r22, Z
    3198:	71 81       	ldd	r23, Z+1	; 0x01
    319a:	82 81       	ldd	r24, Z+2	; 0x02
    319c:	93 81       	ldd	r25, Z+3	; 0x03
    319e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	f8 01       	movw	r30, r16
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	80 83       	st	Z, r24
    31ac:	de 01       	movw	r26, r28
    31ae:	a5 56       	subi	r26, 0x65	; 101
    31b0:	bf 4f       	sbci	r27, 0xFF	; 255
    31b2:	fe 01       	movw	r30, r28
    31b4:	e1 56       	subi	r30, 0x61	; 97
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	80 81       	ld	r24, Z
    31ba:	91 81       	ldd	r25, Z+1	; 0x01
    31bc:	8d 93       	st	X+, r24
    31be:	9c 93       	st	X, r25
    31c0:	fe 01       	movw	r30, r28
    31c2:	e5 56       	subi	r30, 0x65	; 101
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	80 81       	ld	r24, Z
    31c8:	91 81       	ldd	r25, Z+1	; 0x01
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <main+0x774>
    31ce:	fe 01       	movw	r30, r28
    31d0:	e5 56       	subi	r30, 0x65	; 101
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	91 83       	std	Z+1, r25	; 0x01
    31d6:	80 83       	st	Z, r24
			_delay_ms(1000);
			lcd_clear();
    31d8:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
			ultra_triger();
    31dc:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <ultra_triger>
			if (distance <= 20) {
    31e0:	80 91 f2 01 	lds	r24, 0x01F2
    31e4:	90 91 f3 01 	lds	r25, 0x01F3
    31e8:	a0 91 f4 01 	lds	r26, 0x01F4
    31ec:	b0 91 f5 01 	lds	r27, 0x01F5
    31f0:	85 31       	cpi	r24, 0x15	; 21
    31f2:	91 05       	cpc	r25, r1
    31f4:	a1 05       	cpc	r26, r1
    31f6:	b1 05       	cpc	r27, r1
    31f8:	08 f0       	brcs	.+2      	; 0x31fc <main+0x7a6>
    31fa:	66 c5       	rjmp	.+2764   	; 0x3cc8 <main+0x1272>
				lcd_clear();
    31fc:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
				lcd_write_word("obstacle detected");
    3200:	85 e6       	ldi	r24, 0x65	; 101
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	0e 94 10 11 	call	0x2220	; 0x2220 <lcd_write_word>
    3208:	fe 01       	movw	r30, r28
    320a:	e9 56       	subi	r30, 0x69	; 105
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	a0 e2       	ldi	r26, 0x20	; 32
    3214:	b1 e4       	ldi	r27, 0x41	; 65
    3216:	80 83       	st	Z, r24
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	a2 83       	std	Z+2, r26	; 0x02
    321c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321e:	8e 01       	movw	r16, r28
    3220:	0d 56       	subi	r16, 0x6D	; 109
    3222:	1f 4f       	sbci	r17, 0xFF	; 255
    3224:	fe 01       	movw	r30, r28
    3226:	e9 56       	subi	r30, 0x69	; 105
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	60 81       	ld	r22, Z
    322c:	71 81       	ldd	r23, Z+1	; 0x01
    322e:	82 81       	ldd	r24, Z+2	; 0x02
    3230:	93 81       	ldd	r25, Z+3	; 0x03
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	4a e7       	ldi	r20, 0x7A	; 122
    3238:	55 e4       	ldi	r21, 0x45	; 69
    323a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	f8 01       	movw	r30, r16
    3244:	80 83       	st	Z, r24
    3246:	91 83       	std	Z+1, r25	; 0x01
    3248:	a2 83       	std	Z+2, r26	; 0x02
    324a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    324c:	fe 01       	movw	r30, r28
    324e:	ed 56       	subi	r30, 0x6D	; 109
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	60 81       	ld	r22, Z
    3254:	71 81       	ldd	r23, Z+1	; 0x01
    3256:	82 81       	ldd	r24, Z+2	; 0x02
    3258:	93 81       	ldd	r25, Z+3	; 0x03
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e8       	ldi	r20, 0x80	; 128
    3260:	5f e3       	ldi	r21, 0x3F	; 63
    3262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3266:	88 23       	and	r24, r24
    3268:	44 f4       	brge	.+16     	; 0x327a <main+0x824>
		__ticks = 1;
    326a:	fe 01       	movw	r30, r28
    326c:	ef 56       	subi	r30, 0x6F	; 111
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	91 83       	std	Z+1, r25	; 0x01
    3276:	80 83       	st	Z, r24
    3278:	64 c0       	rjmp	.+200    	; 0x3342 <main+0x8ec>
	else if (__tmp > 65535)
    327a:	fe 01       	movw	r30, r28
    327c:	ed 56       	subi	r30, 0x6D	; 109
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	60 81       	ld	r22, Z
    3282:	71 81       	ldd	r23, Z+1	; 0x01
    3284:	82 81       	ldd	r24, Z+2	; 0x02
    3286:	93 81       	ldd	r25, Z+3	; 0x03
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	3f ef       	ldi	r19, 0xFF	; 255
    328c:	4f e7       	ldi	r20, 0x7F	; 127
    328e:	57 e4       	ldi	r21, 0x47	; 71
    3290:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3294:	18 16       	cp	r1, r24
    3296:	0c f0       	brlt	.+2      	; 0x329a <main+0x844>
    3298:	43 c0       	rjmp	.+134    	; 0x3320 <main+0x8ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    329a:	fe 01       	movw	r30, r28
    329c:	e9 56       	subi	r30, 0x69	; 105
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	60 81       	ld	r22, Z
    32a2:	71 81       	ldd	r23, Z+1	; 0x01
    32a4:	82 81       	ldd	r24, Z+2	; 0x02
    32a6:	93 81       	ldd	r25, Z+3	; 0x03
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e2       	ldi	r20, 0x20	; 32
    32ae:	51 e4       	ldi	r21, 0x41	; 65
    32b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	8e 01       	movw	r16, r28
    32ba:	0f 56       	subi	r16, 0x6F	; 111
    32bc:	1f 4f       	sbci	r17, 0xFF	; 255
    32be:	bc 01       	movw	r22, r24
    32c0:	cd 01       	movw	r24, r26
    32c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	f8 01       	movw	r30, r16
    32cc:	91 83       	std	Z+1, r25	; 0x01
    32ce:	80 83       	st	Z, r24
    32d0:	1f c0       	rjmp	.+62     	; 0x3310 <main+0x8ba>
    32d2:	fe 01       	movw	r30, r28
    32d4:	e1 57       	subi	r30, 0x71	; 113
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	80 e9       	ldi	r24, 0x90	; 144
    32da:	91 e0       	ldi	r25, 0x01	; 1
    32dc:	91 83       	std	Z+1, r25	; 0x01
    32de:	80 83       	st	Z, r24
    32e0:	fe 01       	movw	r30, r28
    32e2:	e1 57       	subi	r30, 0x71	; 113
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	80 81       	ld	r24, Z
    32e8:	91 81       	ldd	r25, Z+1	; 0x01
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <main+0x894>
    32ee:	fe 01       	movw	r30, r28
    32f0:	e1 57       	subi	r30, 0x71	; 113
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	91 83       	std	Z+1, r25	; 0x01
    32f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	de 01       	movw	r26, r28
    32fa:	af 56       	subi	r26, 0x6F	; 111
    32fc:	bf 4f       	sbci	r27, 0xFF	; 255
    32fe:	fe 01       	movw	r30, r28
    3300:	ef 56       	subi	r30, 0x6F	; 111
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	80 81       	ld	r24, Z
    3306:	91 81       	ldd	r25, Z+1	; 0x01
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	11 96       	adiw	r26, 0x01	; 1
    330c:	9c 93       	st	X, r25
    330e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3310:	fe 01       	movw	r30, r28
    3312:	ef 56       	subi	r30, 0x6F	; 111
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	80 81       	ld	r24, Z
    3318:	91 81       	ldd	r25, Z+1	; 0x01
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	d1 f6       	brne	.-76     	; 0x32d2 <main+0x87c>
    331e:	27 c0       	rjmp	.+78     	; 0x336e <main+0x918>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3320:	8e 01       	movw	r16, r28
    3322:	0f 56       	subi	r16, 0x6F	; 111
    3324:	1f 4f       	sbci	r17, 0xFF	; 255
    3326:	fe 01       	movw	r30, r28
    3328:	ed 56       	subi	r30, 0x6D	; 109
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	f8 01       	movw	r30, r16
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	80 83       	st	Z, r24
    3342:	de 01       	movw	r26, r28
    3344:	a3 57       	subi	r26, 0x73	; 115
    3346:	bf 4f       	sbci	r27, 0xFF	; 255
    3348:	fe 01       	movw	r30, r28
    334a:	ef 56       	subi	r30, 0x6F	; 111
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	91 81       	ldd	r25, Z+1	; 0x01
    3352:	8d 93       	st	X+, r24
    3354:	9c 93       	st	X, r25
    3356:	fe 01       	movw	r30, r28
    3358:	e3 57       	subi	r30, 0x73	; 115
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	80 81       	ld	r24, Z
    335e:	91 81       	ldd	r25, Z+1	; 0x01
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <main+0x90a>
    3364:	fe 01       	movw	r30, r28
    3366:	e3 57       	subi	r30, 0x73	; 115
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	91 83       	std	Z+1, r25	; 0x01
    336c:	80 83       	st	Z, r24
				_delay_ms(10);
				servo_write(135);
    336e:	87 e8       	ldi	r24, 0x87	; 135
    3370:	0e 94 c5 0c 	call	0x198a	; 0x198a <servo_write>
    3374:	fe 01       	movw	r30, r28
    3376:	e7 57       	subi	r30, 0x77	; 119
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	aa e7       	ldi	r26, 0x7A	; 122
    3380:	b4 e4       	ldi	r27, 0x44	; 68
    3382:	80 83       	st	Z, r24
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	a2 83       	std	Z+2, r26	; 0x02
    3388:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338a:	8e 01       	movw	r16, r28
    338c:	0b 57       	subi	r16, 0x7B	; 123
    338e:	1f 4f       	sbci	r17, 0xFF	; 255
    3390:	fe 01       	movw	r30, r28
    3392:	e7 57       	subi	r30, 0x77	; 119
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	60 81       	ld	r22, Z
    3398:	71 81       	ldd	r23, Z+1	; 0x01
    339a:	82 81       	ldd	r24, Z+2	; 0x02
    339c:	93 81       	ldd	r25, Z+3	; 0x03
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a e7       	ldi	r20, 0x7A	; 122
    33a4:	55 e4       	ldi	r21, 0x45	; 69
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	f8 01       	movw	r30, r16
    33b0:	80 83       	st	Z, r24
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	a2 83       	std	Z+2, r26	; 0x02
    33b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33b8:	fe 01       	movw	r30, r28
    33ba:	eb 57       	subi	r30, 0x7B	; 123
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e8       	ldi	r20, 0x80	; 128
    33cc:	5f e3       	ldi	r21, 0x3F	; 63
    33ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d2:	88 23       	and	r24, r24
    33d4:	44 f4       	brge	.+16     	; 0x33e6 <main+0x990>
		__ticks = 1;
    33d6:	fe 01       	movw	r30, r28
    33d8:	ed 57       	subi	r30, 0x7D	; 125
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	80 83       	st	Z, r24
    33e4:	64 c0       	rjmp	.+200    	; 0x34ae <main+0xa58>
	else if (__tmp > 65535)
    33e6:	fe 01       	movw	r30, r28
    33e8:	eb 57       	subi	r30, 0x7B	; 123
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	60 81       	ld	r22, Z
    33ee:	71 81       	ldd	r23, Z+1	; 0x01
    33f0:	82 81       	ldd	r24, Z+2	; 0x02
    33f2:	93 81       	ldd	r25, Z+3	; 0x03
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	3f ef       	ldi	r19, 0xFF	; 255
    33f8:	4f e7       	ldi	r20, 0x7F	; 127
    33fa:	57 e4       	ldi	r21, 0x47	; 71
    33fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3400:	18 16       	cp	r1, r24
    3402:	0c f0       	brlt	.+2      	; 0x3406 <main+0x9b0>
    3404:	43 c0       	rjmp	.+134    	; 0x348c <main+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3406:	fe 01       	movw	r30, r28
    3408:	e7 57       	subi	r30, 0x77	; 119
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	60 81       	ld	r22, Z
    340e:	71 81       	ldd	r23, Z+1	; 0x01
    3410:	82 81       	ldd	r24, Z+2	; 0x02
    3412:	93 81       	ldd	r25, Z+3	; 0x03
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e2       	ldi	r20, 0x20	; 32
    341a:	51 e4       	ldi	r21, 0x41	; 65
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	8e 01       	movw	r16, r28
    3426:	0d 57       	subi	r16, 0x7D	; 125
    3428:	1f 4f       	sbci	r17, 0xFF	; 255
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	f8 01       	movw	r30, r16
    3438:	91 83       	std	Z+1, r25	; 0x01
    343a:	80 83       	st	Z, r24
    343c:	1f c0       	rjmp	.+62     	; 0x347c <main+0xa26>
    343e:	fe 01       	movw	r30, r28
    3440:	ef 57       	subi	r30, 0x7F	; 127
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	80 e9       	ldi	r24, 0x90	; 144
    3446:	91 e0       	ldi	r25, 0x01	; 1
    3448:	91 83       	std	Z+1, r25	; 0x01
    344a:	80 83       	st	Z, r24
    344c:	fe 01       	movw	r30, r28
    344e:	ef 57       	subi	r30, 0x7F	; 127
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	f1 f7       	brne	.-4      	; 0x3456 <main+0xa00>
    345a:	fe 01       	movw	r30, r28
    345c:	ef 57       	subi	r30, 0x7F	; 127
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3464:	de 01       	movw	r26, r28
    3466:	ad 57       	subi	r26, 0x7D	; 125
    3468:	bf 4f       	sbci	r27, 0xFF	; 255
    346a:	fe 01       	movw	r30, r28
    346c:	ed 57       	subi	r30, 0x7D	; 125
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	80 81       	ld	r24, Z
    3472:	91 81       	ldd	r25, Z+1	; 0x01
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	11 96       	adiw	r26, 0x01	; 1
    3478:	9c 93       	st	X, r25
    347a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347c:	fe 01       	movw	r30, r28
    347e:	ed 57       	subi	r30, 0x7D	; 125
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	d1 f6       	brne	.-76     	; 0x343e <main+0x9e8>
    348a:	27 c0       	rjmp	.+78     	; 0x34da <main+0xa84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348c:	8e 01       	movw	r16, r28
    348e:	0d 57       	subi	r16, 0x7D	; 125
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	fe 01       	movw	r30, r28
    3494:	eb 57       	subi	r30, 0x7B	; 123
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	60 81       	ld	r22, Z
    349a:	71 81       	ldd	r23, Z+1	; 0x01
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	f8 01       	movw	r30, r16
    34aa:	91 83       	std	Z+1, r25	; 0x01
    34ac:	80 83       	st	Z, r24
    34ae:	de 01       	movw	r26, r28
    34b0:	a1 58       	subi	r26, 0x81	; 129
    34b2:	bf 4f       	sbci	r27, 0xFF	; 255
    34b4:	fe 01       	movw	r30, r28
    34b6:	ed 57       	subi	r30, 0x7D	; 125
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	91 81       	ldd	r25, Z+1	; 0x01
    34be:	8d 93       	st	X+, r24
    34c0:	9c 93       	st	X, r25
    34c2:	fe 01       	movw	r30, r28
    34c4:	e1 58       	subi	r30, 0x81	; 129
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <main+0xa76>
    34d0:	fe 01       	movw	r30, r28
    34d2:	e1 58       	subi	r30, 0x81	; 129
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	80 83       	st	Z, r24
				_delay_ms(1000);
				lcd_clear();
    34da:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
				ultra_triger();
    34de:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <ultra_triger>
				if (distance <= 20) {
    34e2:	80 91 f2 01 	lds	r24, 0x01F2
    34e6:	90 91 f3 01 	lds	r25, 0x01F3
    34ea:	a0 91 f4 01 	lds	r26, 0x01F4
    34ee:	b0 91 f5 01 	lds	r27, 0x01F5
    34f2:	85 31       	cpi	r24, 0x15	; 21
    34f4:	91 05       	cpc	r25, r1
    34f6:	a1 05       	cpc	r26, r1
    34f8:	b1 05       	cpc	r27, r1
    34fa:	08 f0       	brcs	.+2      	; 0x34fe <main+0xaa8>
    34fc:	e0 c2       	rjmp	.+1472   	; 0x3abe <main+0x1068>
					lcd_clear();
    34fe:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
					lcd_write_word("obstacle detected");
    3502:	85 e6       	ldi	r24, 0x65	; 101
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	0e 94 10 11 	call	0x2220	; 0x2220 <lcd_write_word>
    350a:	fe 01       	movw	r30, r28
    350c:	e5 58       	subi	r30, 0x85	; 133
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	a0 e2       	ldi	r26, 0x20	; 32
    3516:	b1 e4       	ldi	r27, 0x41	; 65
    3518:	80 83       	st	Z, r24
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	a2 83       	std	Z+2, r26	; 0x02
    351e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3520:	8e 01       	movw	r16, r28
    3522:	09 58       	subi	r16, 0x89	; 137
    3524:	1f 4f       	sbci	r17, 0xFF	; 255
    3526:	fe 01       	movw	r30, r28
    3528:	e5 58       	subi	r30, 0x85	; 133
    352a:	ff 4f       	sbci	r31, 0xFF	; 255
    352c:	60 81       	ld	r22, Z
    352e:	71 81       	ldd	r23, Z+1	; 0x01
    3530:	82 81       	ldd	r24, Z+2	; 0x02
    3532:	93 81       	ldd	r25, Z+3	; 0x03
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	4a e7       	ldi	r20, 0x7A	; 122
    353a:	55 e4       	ldi	r21, 0x45	; 69
    353c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	f8 01       	movw	r30, r16
    3546:	80 83       	st	Z, r24
    3548:	91 83       	std	Z+1, r25	; 0x01
    354a:	a2 83       	std	Z+2, r26	; 0x02
    354c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    354e:	fe 01       	movw	r30, r28
    3550:	e9 58       	subi	r30, 0x89	; 137
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	60 81       	ld	r22, Z
    3556:	71 81       	ldd	r23, Z+1	; 0x01
    3558:	82 81       	ldd	r24, Z+2	; 0x02
    355a:	93 81       	ldd	r25, Z+3	; 0x03
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e8       	ldi	r20, 0x80	; 128
    3562:	5f e3       	ldi	r21, 0x3F	; 63
    3564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3568:	88 23       	and	r24, r24
    356a:	44 f4       	brge	.+16     	; 0x357c <main+0xb26>
		__ticks = 1;
    356c:	fe 01       	movw	r30, r28
    356e:	eb 58       	subi	r30, 0x8B	; 139
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	91 83       	std	Z+1, r25	; 0x01
    3578:	80 83       	st	Z, r24
    357a:	64 c0       	rjmp	.+200    	; 0x3644 <main+0xbee>
	else if (__tmp > 65535)
    357c:	fe 01       	movw	r30, r28
    357e:	e9 58       	subi	r30, 0x89	; 137
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	60 81       	ld	r22, Z
    3584:	71 81       	ldd	r23, Z+1	; 0x01
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	93 81       	ldd	r25, Z+3	; 0x03
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	3f ef       	ldi	r19, 0xFF	; 255
    358e:	4f e7       	ldi	r20, 0x7F	; 127
    3590:	57 e4       	ldi	r21, 0x47	; 71
    3592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3596:	18 16       	cp	r1, r24
    3598:	0c f0       	brlt	.+2      	; 0x359c <main+0xb46>
    359a:	43 c0       	rjmp	.+134    	; 0x3622 <main+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359c:	fe 01       	movw	r30, r28
    359e:	e5 58       	subi	r30, 0x85	; 133
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	60 81       	ld	r22, Z
    35a4:	71 81       	ldd	r23, Z+1	; 0x01
    35a6:	82 81       	ldd	r24, Z+2	; 0x02
    35a8:	93 81       	ldd	r25, Z+3	; 0x03
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e2       	ldi	r20, 0x20	; 32
    35b0:	51 e4       	ldi	r21, 0x41	; 65
    35b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	8e 01       	movw	r16, r28
    35bc:	0b 58       	subi	r16, 0x8B	; 139
    35be:	1f 4f       	sbci	r17, 0xFF	; 255
    35c0:	bc 01       	movw	r22, r24
    35c2:	cd 01       	movw	r24, r26
    35c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	f8 01       	movw	r30, r16
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	80 83       	st	Z, r24
    35d2:	1f c0       	rjmp	.+62     	; 0x3612 <main+0xbbc>
    35d4:	fe 01       	movw	r30, r28
    35d6:	ed 58       	subi	r30, 0x8D	; 141
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 e9       	ldi	r24, 0x90	; 144
    35dc:	91 e0       	ldi	r25, 0x01	; 1
    35de:	91 83       	std	Z+1, r25	; 0x01
    35e0:	80 83       	st	Z, r24
    35e2:	fe 01       	movw	r30, r28
    35e4:	ed 58       	subi	r30, 0x8D	; 141
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 81       	ld	r24, Z
    35ea:	91 81       	ldd	r25, Z+1	; 0x01
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <main+0xb96>
    35f0:	fe 01       	movw	r30, r28
    35f2:	ed 58       	subi	r30, 0x8D	; 141
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fa:	de 01       	movw	r26, r28
    35fc:	ab 58       	subi	r26, 0x8B	; 139
    35fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3600:	fe 01       	movw	r30, r28
    3602:	eb 58       	subi	r30, 0x8B	; 139
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	91 81       	ldd	r25, Z+1	; 0x01
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	11 96       	adiw	r26, 0x01	; 1
    360e:	9c 93       	st	X, r25
    3610:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3612:	fe 01       	movw	r30, r28
    3614:	eb 58       	subi	r30, 0x8B	; 139
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	80 81       	ld	r24, Z
    361a:	91 81       	ldd	r25, Z+1	; 0x01
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	d1 f6       	brne	.-76     	; 0x35d4 <main+0xb7e>
    3620:	27 c0       	rjmp	.+78     	; 0x3670 <main+0xc1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3622:	8e 01       	movw	r16, r28
    3624:	0b 58       	subi	r16, 0x8B	; 139
    3626:	1f 4f       	sbci	r17, 0xFF	; 255
    3628:	fe 01       	movw	r30, r28
    362a:	e9 58       	subi	r30, 0x89	; 137
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	60 81       	ld	r22, Z
    3630:	71 81       	ldd	r23, Z+1	; 0x01
    3632:	82 81       	ldd	r24, Z+2	; 0x02
    3634:	93 81       	ldd	r25, Z+3	; 0x03
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	f8 01       	movw	r30, r16
    3640:	91 83       	std	Z+1, r25	; 0x01
    3642:	80 83       	st	Z, r24
    3644:	de 01       	movw	r26, r28
    3646:	af 58       	subi	r26, 0x8F	; 143
    3648:	bf 4f       	sbci	r27, 0xFF	; 255
    364a:	fe 01       	movw	r30, r28
    364c:	eb 58       	subi	r30, 0x8B	; 139
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	80 81       	ld	r24, Z
    3652:	91 81       	ldd	r25, Z+1	; 0x01
    3654:	8d 93       	st	X+, r24
    3656:	9c 93       	st	X, r25
    3658:	fe 01       	movw	r30, r28
    365a:	ef 58       	subi	r30, 0x8F	; 143
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	80 81       	ld	r24, Z
    3660:	91 81       	ldd	r25, Z+1	; 0x01
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <main+0xc0c>
    3666:	fe 01       	movw	r30, r28
    3668:	ef 58       	subi	r30, 0x8F	; 143
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	91 83       	std	Z+1, r25	; 0x01
    366e:	80 83       	st	Z, r24
					_delay_ms(10);
					backward();
    3670:	0e 94 cf 14 	call	0x299e	; 0x299e <backward>
    3674:	fe 01       	movw	r30, r28
    3676:	e3 59       	subi	r30, 0x93	; 147
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	aa e7       	ldi	r26, 0x7A	; 122
    3680:	b4 e4       	ldi	r27, 0x44	; 68
    3682:	80 83       	st	Z, r24
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	a2 83       	std	Z+2, r26	; 0x02
    3688:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    368a:	8e 01       	movw	r16, r28
    368c:	07 59       	subi	r16, 0x97	; 151
    368e:	1f 4f       	sbci	r17, 0xFF	; 255
    3690:	fe 01       	movw	r30, r28
    3692:	e3 59       	subi	r30, 0x93	; 147
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	60 81       	ld	r22, Z
    3698:	71 81       	ldd	r23, Z+1	; 0x01
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	93 81       	ldd	r25, Z+3	; 0x03
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	4a e7       	ldi	r20, 0x7A	; 122
    36a4:	55 e4       	ldi	r21, 0x45	; 69
    36a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	f8 01       	movw	r30, r16
    36b0:	80 83       	st	Z, r24
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	a2 83       	std	Z+2, r26	; 0x02
    36b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36b8:	fe 01       	movw	r30, r28
    36ba:	e7 59       	subi	r30, 0x97	; 151
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	60 81       	ld	r22, Z
    36c0:	71 81       	ldd	r23, Z+1	; 0x01
    36c2:	82 81       	ldd	r24, Z+2	; 0x02
    36c4:	93 81       	ldd	r25, Z+3	; 0x03
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e8       	ldi	r20, 0x80	; 128
    36cc:	5f e3       	ldi	r21, 0x3F	; 63
    36ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36d2:	88 23       	and	r24, r24
    36d4:	44 f4       	brge	.+16     	; 0x36e6 <main+0xc90>
		__ticks = 1;
    36d6:	fe 01       	movw	r30, r28
    36d8:	e9 59       	subi	r30, 0x99	; 153
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	91 83       	std	Z+1, r25	; 0x01
    36e2:	80 83       	st	Z, r24
    36e4:	64 c0       	rjmp	.+200    	; 0x37ae <main+0xd58>
	else if (__tmp > 65535)
    36e6:	fe 01       	movw	r30, r28
    36e8:	e7 59       	subi	r30, 0x97	; 151
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	60 81       	ld	r22, Z
    36ee:	71 81       	ldd	r23, Z+1	; 0x01
    36f0:	82 81       	ldd	r24, Z+2	; 0x02
    36f2:	93 81       	ldd	r25, Z+3	; 0x03
    36f4:	20 e0       	ldi	r18, 0x00	; 0
    36f6:	3f ef       	ldi	r19, 0xFF	; 255
    36f8:	4f e7       	ldi	r20, 0x7F	; 127
    36fa:	57 e4       	ldi	r21, 0x47	; 71
    36fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3700:	18 16       	cp	r1, r24
    3702:	0c f0       	brlt	.+2      	; 0x3706 <main+0xcb0>
    3704:	43 c0       	rjmp	.+134    	; 0x378c <main+0xd36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3706:	fe 01       	movw	r30, r28
    3708:	e3 59       	subi	r30, 0x93	; 147
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e2       	ldi	r20, 0x20	; 32
    371a:	51 e4       	ldi	r21, 0x41	; 65
    371c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	8e 01       	movw	r16, r28
    3726:	09 59       	subi	r16, 0x99	; 153
    3728:	1f 4f       	sbci	r17, 0xFF	; 255
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	f8 01       	movw	r30, r16
    3738:	91 83       	std	Z+1, r25	; 0x01
    373a:	80 83       	st	Z, r24
    373c:	1f c0       	rjmp	.+62     	; 0x377c <main+0xd26>
    373e:	fe 01       	movw	r30, r28
    3740:	eb 59       	subi	r30, 0x9B	; 155
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	80 e9       	ldi	r24, 0x90	; 144
    3746:	91 e0       	ldi	r25, 0x01	; 1
    3748:	91 83       	std	Z+1, r25	; 0x01
    374a:	80 83       	st	Z, r24
    374c:	fe 01       	movw	r30, r28
    374e:	eb 59       	subi	r30, 0x9B	; 155
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	80 81       	ld	r24, Z
    3754:	91 81       	ldd	r25, Z+1	; 0x01
    3756:	01 97       	sbiw	r24, 0x01	; 1
    3758:	f1 f7       	brne	.-4      	; 0x3756 <main+0xd00>
    375a:	fe 01       	movw	r30, r28
    375c:	eb 59       	subi	r30, 0x9B	; 155
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	91 83       	std	Z+1, r25	; 0x01
    3762:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3764:	de 01       	movw	r26, r28
    3766:	a9 59       	subi	r26, 0x99	; 153
    3768:	bf 4f       	sbci	r27, 0xFF	; 255
    376a:	fe 01       	movw	r30, r28
    376c:	e9 59       	subi	r30, 0x99	; 153
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	80 81       	ld	r24, Z
    3772:	91 81       	ldd	r25, Z+1	; 0x01
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	11 96       	adiw	r26, 0x01	; 1
    3778:	9c 93       	st	X, r25
    377a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377c:	fe 01       	movw	r30, r28
    377e:	e9 59       	subi	r30, 0x99	; 153
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	80 81       	ld	r24, Z
    3784:	91 81       	ldd	r25, Z+1	; 0x01
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	d1 f6       	brne	.-76     	; 0x373e <main+0xce8>
    378a:	27 c0       	rjmp	.+78     	; 0x37da <main+0xd84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    378c:	8e 01       	movw	r16, r28
    378e:	09 59       	subi	r16, 0x99	; 153
    3790:	1f 4f       	sbci	r17, 0xFF	; 255
    3792:	fe 01       	movw	r30, r28
    3794:	e7 59       	subi	r30, 0x97	; 151
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 81       	ld	r22, Z
    379a:	71 81       	ldd	r23, Z+1	; 0x01
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	f8 01       	movw	r30, r16
    37aa:	91 83       	std	Z+1, r25	; 0x01
    37ac:	80 83       	st	Z, r24
    37ae:	de 01       	movw	r26, r28
    37b0:	ad 59       	subi	r26, 0x9D	; 157
    37b2:	bf 4f       	sbci	r27, 0xFF	; 255
    37b4:	fe 01       	movw	r30, r28
    37b6:	e9 59       	subi	r30, 0x99	; 153
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	80 81       	ld	r24, Z
    37bc:	91 81       	ldd	r25, Z+1	; 0x01
    37be:	8d 93       	st	X+, r24
    37c0:	9c 93       	st	X, r25
    37c2:	fe 01       	movw	r30, r28
    37c4:	ed 59       	subi	r30, 0x9D	; 157
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 81       	ld	r24, Z
    37ca:	91 81       	ldd	r25, Z+1	; 0x01
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <main+0xd76>
    37d0:	fe 01       	movw	r30, r28
    37d2:	ed 59       	subi	r30, 0x9D	; 157
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	80 83       	st	Z, r24
					_delay_ms(1000);
					right();
    37da:	0e 94 fd 14 	call	0x29fa	; 0x29fa <right>
    37de:	fe 01       	movw	r30, r28
    37e0:	e1 5a       	subi	r30, 0xA1	; 161
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	aa ef       	ldi	r26, 0xFA	; 250
    37ea:	b3 e4       	ldi	r27, 0x43	; 67
    37ec:	80 83       	st	Z, r24
    37ee:	91 83       	std	Z+1, r25	; 0x01
    37f0:	a2 83       	std	Z+2, r26	; 0x02
    37f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f4:	8e 01       	movw	r16, r28
    37f6:	05 5a       	subi	r16, 0xA5	; 165
    37f8:	1f 4f       	sbci	r17, 0xFF	; 255
    37fa:	fe 01       	movw	r30, r28
    37fc:	e1 5a       	subi	r30, 0xA1	; 161
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	60 81       	ld	r22, Z
    3802:	71 81       	ldd	r23, Z+1	; 0x01
    3804:	82 81       	ldd	r24, Z+2	; 0x02
    3806:	93 81       	ldd	r25, Z+3	; 0x03
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	4a e7       	ldi	r20, 0x7A	; 122
    380e:	55 e4       	ldi	r21, 0x45	; 69
    3810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	f8 01       	movw	r30, r16
    381a:	80 83       	st	Z, r24
    381c:	91 83       	std	Z+1, r25	; 0x01
    381e:	a2 83       	std	Z+2, r26	; 0x02
    3820:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3822:	fe 01       	movw	r30, r28
    3824:	e5 5a       	subi	r30, 0xA5	; 165
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	60 81       	ld	r22, Z
    382a:	71 81       	ldd	r23, Z+1	; 0x01
    382c:	82 81       	ldd	r24, Z+2	; 0x02
    382e:	93 81       	ldd	r25, Z+3	; 0x03
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e8       	ldi	r20, 0x80	; 128
    3836:	5f e3       	ldi	r21, 0x3F	; 63
    3838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    383c:	88 23       	and	r24, r24
    383e:	44 f4       	brge	.+16     	; 0x3850 <main+0xdfa>
		__ticks = 1;
    3840:	fe 01       	movw	r30, r28
    3842:	e7 5a       	subi	r30, 0xA7	; 167
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
    384e:	64 c0       	rjmp	.+200    	; 0x3918 <main+0xec2>
	else if (__tmp > 65535)
    3850:	fe 01       	movw	r30, r28
    3852:	e5 5a       	subi	r30, 0xA5	; 165
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	60 81       	ld	r22, Z
    3858:	71 81       	ldd	r23, Z+1	; 0x01
    385a:	82 81       	ldd	r24, Z+2	; 0x02
    385c:	93 81       	ldd	r25, Z+3	; 0x03
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	3f ef       	ldi	r19, 0xFF	; 255
    3862:	4f e7       	ldi	r20, 0x7F	; 127
    3864:	57 e4       	ldi	r21, 0x47	; 71
    3866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    386a:	18 16       	cp	r1, r24
    386c:	0c f0       	brlt	.+2      	; 0x3870 <main+0xe1a>
    386e:	43 c0       	rjmp	.+134    	; 0x38f6 <main+0xea0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3870:	fe 01       	movw	r30, r28
    3872:	e1 5a       	subi	r30, 0xA1	; 161
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	60 81       	ld	r22, Z
    3878:	71 81       	ldd	r23, Z+1	; 0x01
    387a:	82 81       	ldd	r24, Z+2	; 0x02
    387c:	93 81       	ldd	r25, Z+3	; 0x03
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e2       	ldi	r20, 0x20	; 32
    3884:	51 e4       	ldi	r21, 0x41	; 65
    3886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	8e 01       	movw	r16, r28
    3890:	07 5a       	subi	r16, 0xA7	; 167
    3892:	1f 4f       	sbci	r17, 0xFF	; 255
    3894:	bc 01       	movw	r22, r24
    3896:	cd 01       	movw	r24, r26
    3898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	f8 01       	movw	r30, r16
    38a2:	91 83       	std	Z+1, r25	; 0x01
    38a4:	80 83       	st	Z, r24
    38a6:	1f c0       	rjmp	.+62     	; 0x38e6 <main+0xe90>
    38a8:	fe 01       	movw	r30, r28
    38aa:	e9 5a       	subi	r30, 0xA9	; 169
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	80 e9       	ldi	r24, 0x90	; 144
    38b0:	91 e0       	ldi	r25, 0x01	; 1
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	80 83       	st	Z, r24
    38b6:	fe 01       	movw	r30, r28
    38b8:	e9 5a       	subi	r30, 0xA9	; 169
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	80 81       	ld	r24, Z
    38be:	91 81       	ldd	r25, Z+1	; 0x01
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <main+0xe6a>
    38c4:	fe 01       	movw	r30, r28
    38c6:	e9 5a       	subi	r30, 0xA9	; 169
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	91 83       	std	Z+1, r25	; 0x01
    38cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ce:	de 01       	movw	r26, r28
    38d0:	a7 5a       	subi	r26, 0xA7	; 167
    38d2:	bf 4f       	sbci	r27, 0xFF	; 255
    38d4:	fe 01       	movw	r30, r28
    38d6:	e7 5a       	subi	r30, 0xA7	; 167
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	80 81       	ld	r24, Z
    38dc:	91 81       	ldd	r25, Z+1	; 0x01
    38de:	01 97       	sbiw	r24, 0x01	; 1
    38e0:	11 96       	adiw	r26, 0x01	; 1
    38e2:	9c 93       	st	X, r25
    38e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e6:	fe 01       	movw	r30, r28
    38e8:	e7 5a       	subi	r30, 0xA7	; 167
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	80 81       	ld	r24, Z
    38ee:	91 81       	ldd	r25, Z+1	; 0x01
    38f0:	00 97       	sbiw	r24, 0x00	; 0
    38f2:	d1 f6       	brne	.-76     	; 0x38a8 <main+0xe52>
    38f4:	27 c0       	rjmp	.+78     	; 0x3944 <main+0xeee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f6:	8e 01       	movw	r16, r28
    38f8:	07 5a       	subi	r16, 0xA7	; 167
    38fa:	1f 4f       	sbci	r17, 0xFF	; 255
    38fc:	fe 01       	movw	r30, r28
    38fe:	e5 5a       	subi	r30, 0xA5	; 165
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	60 81       	ld	r22, Z
    3904:	71 81       	ldd	r23, Z+1	; 0x01
    3906:	82 81       	ldd	r24, Z+2	; 0x02
    3908:	93 81       	ldd	r25, Z+3	; 0x03
    390a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	f8 01       	movw	r30, r16
    3914:	91 83       	std	Z+1, r25	; 0x01
    3916:	80 83       	st	Z, r24
    3918:	de 01       	movw	r26, r28
    391a:	ab 5a       	subi	r26, 0xAB	; 171
    391c:	bf 4f       	sbci	r27, 0xFF	; 255
    391e:	fe 01       	movw	r30, r28
    3920:	e7 5a       	subi	r30, 0xA7	; 167
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	80 81       	ld	r24, Z
    3926:	91 81       	ldd	r25, Z+1	; 0x01
    3928:	8d 93       	st	X+, r24
    392a:	9c 93       	st	X, r25
    392c:	fe 01       	movw	r30, r28
    392e:	eb 5a       	subi	r30, 0xAB	; 171
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 81       	ld	r24, Z
    3934:	91 81       	ldd	r25, Z+1	; 0x01
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <main+0xee0>
    393a:	fe 01       	movw	r30, r28
    393c:	eb 5a       	subi	r30, 0xAB	; 171
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	91 83       	std	Z+1, r25	; 0x01
    3942:	80 83       	st	Z, r24
					_delay_ms(500);
					stop();
    3944:	0e 94 14 15 	call	0x2a28	; 0x2a28 <stop>
    3948:	fe 01       	movw	r30, r28
    394a:	ef 5a       	subi	r30, 0xAF	; 175
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	aa ef       	ldi	r26, 0xFA	; 250
    3954:	b3 e4       	ldi	r27, 0x43	; 67
    3956:	80 83       	st	Z, r24
    3958:	91 83       	std	Z+1, r25	; 0x01
    395a:	a2 83       	std	Z+2, r26	; 0x02
    395c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395e:	8e 01       	movw	r16, r28
    3960:	03 5b       	subi	r16, 0xB3	; 179
    3962:	1f 4f       	sbci	r17, 0xFF	; 255
    3964:	fe 01       	movw	r30, r28
    3966:	ef 5a       	subi	r30, 0xAF	; 175
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	60 81       	ld	r22, Z
    396c:	71 81       	ldd	r23, Z+1	; 0x01
    396e:	82 81       	ldd	r24, Z+2	; 0x02
    3970:	93 81       	ldd	r25, Z+3	; 0x03
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	4a e7       	ldi	r20, 0x7A	; 122
    3978:	55 e4       	ldi	r21, 0x45	; 69
    397a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	f8 01       	movw	r30, r16
    3984:	80 83       	st	Z, r24
    3986:	91 83       	std	Z+1, r25	; 0x01
    3988:	a2 83       	std	Z+2, r26	; 0x02
    398a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    398c:	fe 01       	movw	r30, r28
    398e:	e3 5b       	subi	r30, 0xB3	; 179
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	60 81       	ld	r22, Z
    3994:	71 81       	ldd	r23, Z+1	; 0x01
    3996:	82 81       	ldd	r24, Z+2	; 0x02
    3998:	93 81       	ldd	r25, Z+3	; 0x03
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e8       	ldi	r20, 0x80	; 128
    39a0:	5f e3       	ldi	r21, 0x3F	; 63
    39a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39a6:	88 23       	and	r24, r24
    39a8:	44 f4       	brge	.+16     	; 0x39ba <main+0xf64>
		__ticks = 1;
    39aa:	fe 01       	movw	r30, r28
    39ac:	e5 5b       	subi	r30, 0xB5	; 181
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	91 83       	std	Z+1, r25	; 0x01
    39b6:	80 83       	st	Z, r24
    39b8:	64 c0       	rjmp	.+200    	; 0x3a82 <main+0x102c>
	else if (__tmp > 65535)
    39ba:	fe 01       	movw	r30, r28
    39bc:	e3 5b       	subi	r30, 0xB3	; 179
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	60 81       	ld	r22, Z
    39c2:	71 81       	ldd	r23, Z+1	; 0x01
    39c4:	82 81       	ldd	r24, Z+2	; 0x02
    39c6:	93 81       	ldd	r25, Z+3	; 0x03
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	3f ef       	ldi	r19, 0xFF	; 255
    39cc:	4f e7       	ldi	r20, 0x7F	; 127
    39ce:	57 e4       	ldi	r21, 0x47	; 71
    39d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39d4:	18 16       	cp	r1, r24
    39d6:	0c f0       	brlt	.+2      	; 0x39da <main+0xf84>
    39d8:	43 c0       	rjmp	.+134    	; 0x3a60 <main+0x100a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39da:	fe 01       	movw	r30, r28
    39dc:	ef 5a       	subi	r30, 0xAF	; 175
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	60 81       	ld	r22, Z
    39e2:	71 81       	ldd	r23, Z+1	; 0x01
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	40 e2       	ldi	r20, 0x20	; 32
    39ee:	51 e4       	ldi	r21, 0x41	; 65
    39f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	8e 01       	movw	r16, r28
    39fa:	05 5b       	subi	r16, 0xB5	; 181
    39fc:	1f 4f       	sbci	r17, 0xFF	; 255
    39fe:	bc 01       	movw	r22, r24
    3a00:	cd 01       	movw	r24, r26
    3a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	f8 01       	movw	r30, r16
    3a0c:	91 83       	std	Z+1, r25	; 0x01
    3a0e:	80 83       	st	Z, r24
    3a10:	1f c0       	rjmp	.+62     	; 0x3a50 <main+0xffa>
    3a12:	fe 01       	movw	r30, r28
    3a14:	e7 5b       	subi	r30, 0xB7	; 183
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 e9       	ldi	r24, 0x90	; 144
    3a1a:	91 e0       	ldi	r25, 0x01	; 1
    3a1c:	91 83       	std	Z+1, r25	; 0x01
    3a1e:	80 83       	st	Z, r24
    3a20:	fe 01       	movw	r30, r28
    3a22:	e7 5b       	subi	r30, 0xB7	; 183
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	80 81       	ld	r24, Z
    3a28:	91 81       	ldd	r25, Z+1	; 0x01
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <main+0xfd4>
    3a2e:	fe 01       	movw	r30, r28
    3a30:	e7 5b       	subi	r30, 0xB7	; 183
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	91 83       	std	Z+1, r25	; 0x01
    3a36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a38:	de 01       	movw	r26, r28
    3a3a:	a5 5b       	subi	r26, 0xB5	; 181
    3a3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a3e:	fe 01       	movw	r30, r28
    3a40:	e5 5b       	subi	r30, 0xB5	; 181
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 81       	ld	r24, Z
    3a46:	91 81       	ldd	r25, Z+1	; 0x01
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	11 96       	adiw	r26, 0x01	; 1
    3a4c:	9c 93       	st	X, r25
    3a4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a50:	fe 01       	movw	r30, r28
    3a52:	e5 5b       	subi	r30, 0xB5	; 181
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	80 81       	ld	r24, Z
    3a58:	91 81       	ldd	r25, Z+1	; 0x01
    3a5a:	00 97       	sbiw	r24, 0x00	; 0
    3a5c:	d1 f6       	brne	.-76     	; 0x3a12 <main+0xfbc>
    3a5e:	27 c0       	rjmp	.+78     	; 0x3aae <main+0x1058>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a60:	8e 01       	movw	r16, r28
    3a62:	05 5b       	subi	r16, 0xB5	; 181
    3a64:	1f 4f       	sbci	r17, 0xFF	; 255
    3a66:	fe 01       	movw	r30, r28
    3a68:	e3 5b       	subi	r30, 0xB3	; 179
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	60 81       	ld	r22, Z
    3a6e:	71 81       	ldd	r23, Z+1	; 0x01
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	93 81       	ldd	r25, Z+3	; 0x03
    3a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	f8 01       	movw	r30, r16
    3a7e:	91 83       	std	Z+1, r25	; 0x01
    3a80:	80 83       	st	Z, r24
    3a82:	de 01       	movw	r26, r28
    3a84:	a9 5b       	subi	r26, 0xB9	; 185
    3a86:	bf 4f       	sbci	r27, 0xFF	; 255
    3a88:	fe 01       	movw	r30, r28
    3a8a:	e5 5b       	subi	r30, 0xB5	; 181
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	8d 93       	st	X+, r24
    3a94:	9c 93       	st	X, r25
    3a96:	fe 01       	movw	r30, r28
    3a98:	e9 5b       	subi	r30, 0xB9	; 185
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	80 81       	ld	r24, Z
    3a9e:	91 81       	ldd	r25, Z+1	; 0x01
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <main+0x104a>
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	e9 5b       	subi	r30, 0xB9	; 185
    3aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aaa:	91 83       	std	Z+1, r25	; 0x01
    3aac:	80 83       	st	Z, r24
					_delay_ms(500);
					lcd_clear();
    3aae:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
					servo_write(90);
    3ab2:	8a e5       	ldi	r24, 0x5A	; 90
    3ab4:	0e 94 c5 0c 	call	0x198a	; 0x198a <servo_write>
					ultra_triger();
    3ab8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <ultra_triger>
    3abc:	f6 c1       	rjmp	.+1004   	; 0x3eaa <main+0x1454>
				} else {
					lcd_clear();
    3abe:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
					lcd_write_word("no obstacle detected");
    3ac2:	87 e7       	ldi	r24, 0x77	; 119
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	0e 94 10 11 	call	0x2220	; 0x2220 <lcd_write_word>
    3aca:	fe 01       	movw	r30, r28
    3acc:	ed 5b       	subi	r30, 0xBD	; 189
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	a0 e2       	ldi	r26, 0x20	; 32
    3ad6:	b1 e4       	ldi	r27, 0x41	; 65
    3ad8:	80 83       	st	Z, r24
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	a2 83       	std	Z+2, r26	; 0x02
    3ade:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae0:	8e 01       	movw	r16, r28
    3ae2:	01 5c       	subi	r16, 0xC1	; 193
    3ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	ed 5b       	subi	r30, 0xBD	; 189
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	60 81       	ld	r22, Z
    3aee:	71 81       	ldd	r23, Z+1	; 0x01
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	4a e7       	ldi	r20, 0x7A	; 122
    3afa:	55 e4       	ldi	r21, 0x45	; 69
    3afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	f8 01       	movw	r30, r16
    3b06:	80 83       	st	Z, r24
    3b08:	91 83       	std	Z+1, r25	; 0x01
    3b0a:	a2 83       	std	Z+2, r26	; 0x02
    3b0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b0e:	fe 01       	movw	r30, r28
    3b10:	ff 96       	adiw	r30, 0x3f	; 63
    3b12:	60 81       	ld	r22, Z
    3b14:	71 81       	ldd	r23, Z+1	; 0x01
    3b16:	82 81       	ldd	r24, Z+2	; 0x02
    3b18:	93 81       	ldd	r25, Z+3	; 0x03
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	40 e8       	ldi	r20, 0x80	; 128
    3b20:	5f e3       	ldi	r21, 0x3F	; 63
    3b22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b26:	88 23       	and	r24, r24
    3b28:	2c f4       	brge	.+10     	; 0x3b34 <main+0x10de>
		__ticks = 1;
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	9e af       	std	Y+62, r25	; 0x3e
    3b30:	8d af       	std	Y+61, r24	; 0x3d
    3b32:	46 c0       	rjmp	.+140    	; 0x3bc0 <main+0x116a>
	else if (__tmp > 65535)
    3b34:	fe 01       	movw	r30, r28
    3b36:	ff 96       	adiw	r30, 0x3f	; 63
    3b38:	60 81       	ld	r22, Z
    3b3a:	71 81       	ldd	r23, Z+1	; 0x01
    3b3c:	82 81       	ldd	r24, Z+2	; 0x02
    3b3e:	93 81       	ldd	r25, Z+3	; 0x03
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	3f ef       	ldi	r19, 0xFF	; 255
    3b44:	4f e7       	ldi	r20, 0x7F	; 127
    3b46:	57 e4       	ldi	r21, 0x47	; 71
    3b48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b4c:	18 16       	cp	r1, r24
    3b4e:	64 f5       	brge	.+88     	; 0x3ba8 <main+0x1152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b50:	fe 01       	movw	r30, r28
    3b52:	ed 5b       	subi	r30, 0xBD	; 189
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	51 e4       	ldi	r21, 0x41	; 65
    3b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	bc 01       	movw	r22, r24
    3b70:	cd 01       	movw	r24, r26
    3b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	9e af       	std	Y+62, r25	; 0x3e
    3b7c:	8d af       	std	Y+61, r24	; 0x3d
    3b7e:	0f c0       	rjmp	.+30     	; 0x3b9e <main+0x1148>
    3b80:	80 e9       	ldi	r24, 0x90	; 144
    3b82:	91 e0       	ldi	r25, 0x01	; 1
    3b84:	9c af       	std	Y+60, r25	; 0x3c
    3b86:	8b af       	std	Y+59, r24	; 0x3b
    3b88:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b8a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <main+0x1136>
    3b90:	9c af       	std	Y+60, r25	; 0x3c
    3b92:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b94:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b96:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	9e af       	std	Y+62, r25	; 0x3e
    3b9c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ba0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	69 f7       	brne	.-38     	; 0x3b80 <main+0x112a>
    3ba6:	16 c0       	rjmp	.+44     	; 0x3bd4 <main+0x117e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba8:	fe 01       	movw	r30, r28
    3baa:	ff 96       	adiw	r30, 0x3f	; 63
    3bac:	60 81       	ld	r22, Z
    3bae:	71 81       	ldd	r23, Z+1	; 0x01
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	93 81       	ldd	r25, Z+3	; 0x03
    3bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9e af       	std	Y+62, r25	; 0x3e
    3bbe:	8d af       	std	Y+61, r24	; 0x3d
    3bc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bc4:	9a af       	std	Y+58, r25	; 0x3a
    3bc6:	89 af       	std	Y+57, r24	; 0x39
    3bc8:	89 ad       	ldd	r24, Y+57	; 0x39
    3bca:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <main+0x1176>
    3bd0:	9a af       	std	Y+58, r25	; 0x3a
    3bd2:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(10);
					left();
    3bd4:	0e 94 e6 14 	call	0x29cc	; 0x29cc <left>
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	aa ef       	ldi	r26, 0xFA	; 250
    3bde:	b3 e4       	ldi	r27, 0x43	; 67
    3be0:	8d ab       	std	Y+53, r24	; 0x35
    3be2:	9e ab       	std	Y+54, r25	; 0x36
    3be4:	af ab       	std	Y+55, r26	; 0x37
    3be6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be8:	6d a9       	ldd	r22, Y+53	; 0x35
    3bea:	7e a9       	ldd	r23, Y+54	; 0x36
    3bec:	8f a9       	ldd	r24, Y+55	; 0x37
    3bee:	98 ad       	ldd	r25, Y+56	; 0x38
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	4a e7       	ldi	r20, 0x7A	; 122
    3bf6:	55 e4       	ldi	r21, 0x45	; 69
    3bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	89 ab       	std	Y+49, r24	; 0x31
    3c02:	9a ab       	std	Y+50, r25	; 0x32
    3c04:	ab ab       	std	Y+51, r26	; 0x33
    3c06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c08:	69 a9       	ldd	r22, Y+49	; 0x31
    3c0a:	7a a9       	ldd	r23, Y+50	; 0x32
    3c0c:	8b a9       	ldd	r24, Y+51	; 0x33
    3c0e:	9c a9       	ldd	r25, Y+52	; 0x34
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e8       	ldi	r20, 0x80	; 128
    3c16:	5f e3       	ldi	r21, 0x3F	; 63
    3c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c1c:	88 23       	and	r24, r24
    3c1e:	2c f4       	brge	.+10     	; 0x3c2a <main+0x11d4>
		__ticks = 1;
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	98 ab       	std	Y+48, r25	; 0x30
    3c26:	8f a7       	std	Y+47, r24	; 0x2f
    3c28:	3f c0       	rjmp	.+126    	; 0x3ca8 <main+0x1252>
	else if (__tmp > 65535)
    3c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    3c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    3c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    3c30:	9c a9       	ldd	r25, Y+52	; 0x34
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	3f ef       	ldi	r19, 0xFF	; 255
    3c36:	4f e7       	ldi	r20, 0x7F	; 127
    3c38:	57 e4       	ldi	r21, 0x47	; 71
    3c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c3e:	18 16       	cp	r1, r24
    3c40:	4c f5       	brge	.+82     	; 0x3c94 <main+0x123e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c42:	6d a9       	ldd	r22, Y+53	; 0x35
    3c44:	7e a9       	ldd	r23, Y+54	; 0x36
    3c46:	8f a9       	ldd	r24, Y+55	; 0x37
    3c48:	98 ad       	ldd	r25, Y+56	; 0x38
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	40 e2       	ldi	r20, 0x20	; 32
    3c50:	51 e4       	ldi	r21, 0x41	; 65
    3c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	bc 01       	movw	r22, r24
    3c5c:	cd 01       	movw	r24, r26
    3c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	98 ab       	std	Y+48, r25	; 0x30
    3c68:	8f a7       	std	Y+47, r24	; 0x2f
    3c6a:	0f c0       	rjmp	.+30     	; 0x3c8a <main+0x1234>
    3c6c:	80 e9       	ldi	r24, 0x90	; 144
    3c6e:	91 e0       	ldi	r25, 0x01	; 1
    3c70:	9e a7       	std	Y+46, r25	; 0x2e
    3c72:	8d a7       	std	Y+45, r24	; 0x2d
    3c74:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c76:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	f1 f7       	brne	.-4      	; 0x3c78 <main+0x1222>
    3c7c:	9e a7       	std	Y+46, r25	; 0x2e
    3c7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c80:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c82:	98 a9       	ldd	r25, Y+48	; 0x30
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	98 ab       	std	Y+48, r25	; 0x30
    3c88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c8c:	98 a9       	ldd	r25, Y+48	; 0x30
    3c8e:	00 97       	sbiw	r24, 0x00	; 0
    3c90:	69 f7       	brne	.-38     	; 0x3c6c <main+0x1216>
    3c92:	14 c0       	rjmp	.+40     	; 0x3cbc <main+0x1266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c94:	69 a9       	ldd	r22, Y+49	; 0x31
    3c96:	7a a9       	ldd	r23, Y+50	; 0x32
    3c98:	8b a9       	ldd	r24, Y+51	; 0x33
    3c9a:	9c a9       	ldd	r25, Y+52	; 0x34
    3c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	98 ab       	std	Y+48, r25	; 0x30
    3ca6:	8f a7       	std	Y+47, r24	; 0x2f
    3ca8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3caa:	98 a9       	ldd	r25, Y+48	; 0x30
    3cac:	9c a7       	std	Y+44, r25	; 0x2c
    3cae:	8b a7       	std	Y+43, r24	; 0x2b
    3cb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	f1 f7       	brne	.-4      	; 0x3cb4 <main+0x125e>
    3cb8:	9c a7       	std	Y+44, r25	; 0x2c
    3cba:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					lcd_clear();
    3cbc:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
					servo_write(90);
    3cc0:	8a e5       	ldi	r24, 0x5A	; 90
    3cc2:	0e 94 c5 0c 	call	0x198a	; 0x198a <servo_write>
    3cc6:	f1 c0       	rjmp	.+482    	; 0x3eaa <main+0x1454>
				}
			} else {
				lcd_clear();
    3cc8:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
				lcd_write_word("no obstacle detected");
    3ccc:	87 e7       	ldi	r24, 0x77	; 119
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	0e 94 10 11 	call	0x2220	; 0x2220 <lcd_write_word>
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	a0 e2       	ldi	r26, 0x20	; 32
    3cda:	b1 e4       	ldi	r27, 0x41	; 65
    3cdc:	8f a3       	std	Y+39, r24	; 0x27
    3cde:	98 a7       	std	Y+40, r25	; 0x28
    3ce0:	a9 a7       	std	Y+41, r26	; 0x29
    3ce2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce4:	6f a1       	ldd	r22, Y+39	; 0x27
    3ce6:	78 a5       	ldd	r23, Y+40	; 0x28
    3ce8:	89 a5       	ldd	r24, Y+41	; 0x29
    3cea:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	4a e7       	ldi	r20, 0x7A	; 122
    3cf2:	55 e4       	ldi	r21, 0x45	; 69
    3cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	8b a3       	std	Y+35, r24	; 0x23
    3cfe:	9c a3       	std	Y+36, r25	; 0x24
    3d00:	ad a3       	std	Y+37, r26	; 0x25
    3d02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d04:	6b a1       	ldd	r22, Y+35	; 0x23
    3d06:	7c a1       	ldd	r23, Y+36	; 0x24
    3d08:	8d a1       	ldd	r24, Y+37	; 0x25
    3d0a:	9e a1       	ldd	r25, Y+38	; 0x26
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	40 e8       	ldi	r20, 0x80	; 128
    3d12:	5f e3       	ldi	r21, 0x3F	; 63
    3d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d18:	88 23       	and	r24, r24
    3d1a:	2c f4       	brge	.+10     	; 0x3d26 <main+0x12d0>
		__ticks = 1;
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	9a a3       	std	Y+34, r25	; 0x22
    3d22:	89 a3       	std	Y+33, r24	; 0x21
    3d24:	3f c0       	rjmp	.+126    	; 0x3da4 <main+0x134e>
	else if (__tmp > 65535)
    3d26:	6b a1       	ldd	r22, Y+35	; 0x23
    3d28:	7c a1       	ldd	r23, Y+36	; 0x24
    3d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	3f ef       	ldi	r19, 0xFF	; 255
    3d32:	4f e7       	ldi	r20, 0x7F	; 127
    3d34:	57 e4       	ldi	r21, 0x47	; 71
    3d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d3a:	18 16       	cp	r1, r24
    3d3c:	4c f5       	brge	.+82     	; 0x3d90 <main+0x133a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3e:	6f a1       	ldd	r22, Y+39	; 0x27
    3d40:	78 a5       	ldd	r23, Y+40	; 0x28
    3d42:	89 a5       	ldd	r24, Y+41	; 0x29
    3d44:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	40 e2       	ldi	r20, 0x20	; 32
    3d4c:	51 e4       	ldi	r21, 0x41	; 65
    3d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	bc 01       	movw	r22, r24
    3d58:	cd 01       	movw	r24, r26
    3d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	9a a3       	std	Y+34, r25	; 0x22
    3d64:	89 a3       	std	Y+33, r24	; 0x21
    3d66:	0f c0       	rjmp	.+30     	; 0x3d86 <main+0x1330>
    3d68:	80 e9       	ldi	r24, 0x90	; 144
    3d6a:	91 e0       	ldi	r25, 0x01	; 1
    3d6c:	98 a3       	std	Y+32, r25	; 0x20
    3d6e:	8f 8f       	std	Y+31, r24	; 0x1f
    3d70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d72:	98 a1       	ldd	r25, Y+32	; 0x20
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	f1 f7       	brne	.-4      	; 0x3d74 <main+0x131e>
    3d78:	98 a3       	std	Y+32, r25	; 0x20
    3d7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    3d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    3d80:	01 97       	sbiw	r24, 0x01	; 1
    3d82:	9a a3       	std	Y+34, r25	; 0x22
    3d84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d86:	89 a1       	ldd	r24, Y+33	; 0x21
    3d88:	9a a1       	ldd	r25, Y+34	; 0x22
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	69 f7       	brne	.-38     	; 0x3d68 <main+0x1312>
    3d8e:	14 c0       	rjmp	.+40     	; 0x3db8 <main+0x1362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d90:	6b a1       	ldd	r22, Y+35	; 0x23
    3d92:	7c a1       	ldd	r23, Y+36	; 0x24
    3d94:	8d a1       	ldd	r24, Y+37	; 0x25
    3d96:	9e a1       	ldd	r25, Y+38	; 0x26
    3d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	9a a3       	std	Y+34, r25	; 0x22
    3da2:	89 a3       	std	Y+33, r24	; 0x21
    3da4:	89 a1       	ldd	r24, Y+33	; 0x21
    3da6:	9a a1       	ldd	r25, Y+34	; 0x22
    3da8:	9e 8f       	std	Y+30, r25	; 0x1e
    3daa:	8d 8f       	std	Y+29, r24	; 0x1d
    3dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	f1 f7       	brne	.-4      	; 0x3db0 <main+0x135a>
    3db4:	9e 8f       	std	Y+30, r25	; 0x1e
    3db6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);
				right();
    3db8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <right>
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	aa ef       	ldi	r26, 0xFA	; 250
    3dc2:	b3 e4       	ldi	r27, 0x43	; 67
    3dc4:	89 8f       	std	Y+25, r24	; 0x19
    3dc6:	9a 8f       	std	Y+26, r25	; 0x1a
    3dc8:	ab 8f       	std	Y+27, r26	; 0x1b
    3dca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dcc:	69 8d       	ldd	r22, Y+25	; 0x19
    3dce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	4a e7       	ldi	r20, 0x7A	; 122
    3dda:	55 e4       	ldi	r21, 0x45	; 69
    3ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	8d 8b       	std	Y+21, r24	; 0x15
    3de6:	9e 8b       	std	Y+22, r25	; 0x16
    3de8:	af 8b       	std	Y+23, r26	; 0x17
    3dea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3dec:	6d 89       	ldd	r22, Y+21	; 0x15
    3dee:	7e 89       	ldd	r23, Y+22	; 0x16
    3df0:	8f 89       	ldd	r24, Y+23	; 0x17
    3df2:	98 8d       	ldd	r25, Y+24	; 0x18
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	40 e8       	ldi	r20, 0x80	; 128
    3dfa:	5f e3       	ldi	r21, 0x3F	; 63
    3dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e00:	88 23       	and	r24, r24
    3e02:	2c f4       	brge	.+10     	; 0x3e0e <main+0x13b8>
		__ticks = 1;
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	9c 8b       	std	Y+20, r25	; 0x14
    3e0a:	8b 8b       	std	Y+19, r24	; 0x13
    3e0c:	3f c0       	rjmp	.+126    	; 0x3e8c <main+0x1436>
	else if (__tmp > 65535)
    3e0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3e10:	7e 89       	ldd	r23, Y+22	; 0x16
    3e12:	8f 89       	ldd	r24, Y+23	; 0x17
    3e14:	98 8d       	ldd	r25, Y+24	; 0x18
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	3f ef       	ldi	r19, 0xFF	; 255
    3e1a:	4f e7       	ldi	r20, 0x7F	; 127
    3e1c:	57 e4       	ldi	r21, 0x47	; 71
    3e1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e22:	18 16       	cp	r1, r24
    3e24:	4c f5       	brge	.+82     	; 0x3e78 <main+0x1422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e26:	69 8d       	ldd	r22, Y+25	; 0x19
    3e28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	40 e2       	ldi	r20, 0x20	; 32
    3e34:	51 e4       	ldi	r21, 0x41	; 65
    3e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	bc 01       	movw	r22, r24
    3e40:	cd 01       	movw	r24, r26
    3e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e46:	dc 01       	movw	r26, r24
    3e48:	cb 01       	movw	r24, r22
    3e4a:	9c 8b       	std	Y+20, r25	; 0x14
    3e4c:	8b 8b       	std	Y+19, r24	; 0x13
    3e4e:	0f c0       	rjmp	.+30     	; 0x3e6e <main+0x1418>
    3e50:	80 e9       	ldi	r24, 0x90	; 144
    3e52:	91 e0       	ldi	r25, 0x01	; 1
    3e54:	9a 8b       	std	Y+18, r25	; 0x12
    3e56:	89 8b       	std	Y+17, r24	; 0x11
    3e58:	89 89       	ldd	r24, Y+17	; 0x11
    3e5a:	9a 89       	ldd	r25, Y+18	; 0x12
    3e5c:	01 97       	sbiw	r24, 0x01	; 1
    3e5e:	f1 f7       	brne	.-4      	; 0x3e5c <main+0x1406>
    3e60:	9a 8b       	std	Y+18, r25	; 0x12
    3e62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e64:	8b 89       	ldd	r24, Y+19	; 0x13
    3e66:	9c 89       	ldd	r25, Y+20	; 0x14
    3e68:	01 97       	sbiw	r24, 0x01	; 1
    3e6a:	9c 8b       	std	Y+20, r25	; 0x14
    3e6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e70:	9c 89       	ldd	r25, Y+20	; 0x14
    3e72:	00 97       	sbiw	r24, 0x00	; 0
    3e74:	69 f7       	brne	.-38     	; 0x3e50 <main+0x13fa>
    3e76:	14 c0       	rjmp	.+40     	; 0x3ea0 <main+0x144a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e78:	6d 89       	ldd	r22, Y+21	; 0x15
    3e7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e84:	dc 01       	movw	r26, r24
    3e86:	cb 01       	movw	r24, r22
    3e88:	9c 8b       	std	Y+20, r25	; 0x14
    3e8a:	8b 8b       	std	Y+19, r24	; 0x13
    3e8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e90:	98 8b       	std	Y+16, r25	; 0x10
    3e92:	8f 87       	std	Y+15, r24	; 0x0f
    3e94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e96:	98 89       	ldd	r25, Y+16	; 0x10
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	f1 f7       	brne	.-4      	; 0x3e98 <main+0x1442>
    3e9c:	98 8b       	std	Y+16, r25	; 0x10
    3e9e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				lcd_clear();
    3ea0:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
				servo_write(90);
    3ea4:	8a e5       	ldi	r24, 0x5A	; 90
    3ea6:	0e 94 c5 0c 	call	0x198a	; 0x198a <servo_write>
			}
		}
		lcd_clear();
    3eaa:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
		lcd_write_word("no obstacle detected");
    3eae:	87 e7       	ldi	r24, 0x77	; 119
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	0e 94 10 11 	call	0x2220	; 0x2220 <lcd_write_word>
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	a8 ec       	ldi	r26, 0xC8	; 200
    3ebc:	b2 e4       	ldi	r27, 0x42	; 66
    3ebe:	8b 87       	std	Y+11, r24	; 0x0b
    3ec0:	9c 87       	std	Y+12, r25	; 0x0c
    3ec2:	ad 87       	std	Y+13, r26	; 0x0d
    3ec4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	4a e7       	ldi	r20, 0x7A	; 122
    3ed4:	55 e4       	ldi	r21, 0x45	; 69
    3ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	8f 83       	std	Y+7, r24	; 0x07
    3ee0:	98 87       	std	Y+8, r25	; 0x08
    3ee2:	a9 87       	std	Y+9, r26	; 0x09
    3ee4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee8:	78 85       	ldd	r23, Y+8	; 0x08
    3eea:	89 85       	ldd	r24, Y+9	; 0x09
    3eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	40 e8       	ldi	r20, 0x80	; 128
    3ef4:	5f e3       	ldi	r21, 0x3F	; 63
    3ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3efa:	88 23       	and	r24, r24
    3efc:	2c f4       	brge	.+10     	; 0x3f08 <main+0x14b2>
		__ticks = 1;
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	9e 83       	std	Y+6, r25	; 0x06
    3f04:	8d 83       	std	Y+5, r24	; 0x05
    3f06:	3f c0       	rjmp	.+126    	; 0x3f86 <main+0x1530>
	else if (__tmp > 65535)
    3f08:	6f 81       	ldd	r22, Y+7	; 0x07
    3f0a:	78 85       	ldd	r23, Y+8	; 0x08
    3f0c:	89 85       	ldd	r24, Y+9	; 0x09
    3f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	3f ef       	ldi	r19, 0xFF	; 255
    3f14:	4f e7       	ldi	r20, 0x7F	; 127
    3f16:	57 e4       	ldi	r21, 0x47	; 71
    3f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1c:	18 16       	cp	r1, r24
    3f1e:	4c f5       	brge	.+82     	; 0x3f72 <main+0x151c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	40 e2       	ldi	r20, 0x20	; 32
    3f2e:	51 e4       	ldi	r21, 0x41	; 65
    3f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	bc 01       	movw	r22, r24
    3f3a:	cd 01       	movw	r24, r26
    3f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f40:	dc 01       	movw	r26, r24
    3f42:	cb 01       	movw	r24, r22
    3f44:	9e 83       	std	Y+6, r25	; 0x06
    3f46:	8d 83       	std	Y+5, r24	; 0x05
    3f48:	0f c0       	rjmp	.+30     	; 0x3f68 <main+0x1512>
    3f4a:	80 e9       	ldi	r24, 0x90	; 144
    3f4c:	91 e0       	ldi	r25, 0x01	; 1
    3f4e:	9c 83       	std	Y+4, r25	; 0x04
    3f50:	8b 83       	std	Y+3, r24	; 0x03
    3f52:	8b 81       	ldd	r24, Y+3	; 0x03
    3f54:	9c 81       	ldd	r25, Y+4	; 0x04
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	f1 f7       	brne	.-4      	; 0x3f56 <main+0x1500>
    3f5a:	9c 83       	std	Y+4, r25	; 0x04
    3f5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f60:	9e 81       	ldd	r25, Y+6	; 0x06
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	9e 83       	std	Y+6, r25	; 0x06
    3f66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f68:	8d 81       	ldd	r24, Y+5	; 0x05
    3f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6c:	00 97       	sbiw	r24, 0x00	; 0
    3f6e:	69 f7       	brne	.-38     	; 0x3f4a <main+0x14f4>
    3f70:	14 c0       	rjmp	.+40     	; 0x3f9a <main+0x1544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f72:	6f 81       	ldd	r22, Y+7	; 0x07
    3f74:	78 85       	ldd	r23, Y+8	; 0x08
    3f76:	89 85       	ldd	r24, Y+9	; 0x09
    3f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	9e 83       	std	Y+6, r25	; 0x06
    3f84:	8d 83       	std	Y+5, r24	; 0x05
    3f86:	8d 81       	ldd	r24, Y+5	; 0x05
    3f88:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8a:	9a 83       	std	Y+2, r25	; 0x02
    3f8c:	89 83       	std	Y+1, r24	; 0x01
    3f8e:	89 81       	ldd	r24, Y+1	; 0x01
    3f90:	9a 81       	ldd	r25, Y+2	; 0x02
    3f92:	01 97       	sbiw	r24, 0x01	; 1
    3f94:	f1 f7       	brne	.-4      	; 0x3f92 <main+0x153c>
    3f96:	9a 83       	std	Y+2, r25	; 0x02
    3f98:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		lcd_clear();
    3f9a:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_clear>
    3f9e:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <main+0x1a8>

00003fa2 <__udivmodsi4>:
    3fa2:	a1 e2       	ldi	r26, 0x21	; 33
    3fa4:	1a 2e       	mov	r1, r26
    3fa6:	aa 1b       	sub	r26, r26
    3fa8:	bb 1b       	sub	r27, r27
    3faa:	fd 01       	movw	r30, r26
    3fac:	0d c0       	rjmp	.+26     	; 0x3fc8 <__udivmodsi4_ep>

00003fae <__udivmodsi4_loop>:
    3fae:	aa 1f       	adc	r26, r26
    3fb0:	bb 1f       	adc	r27, r27
    3fb2:	ee 1f       	adc	r30, r30
    3fb4:	ff 1f       	adc	r31, r31
    3fb6:	a2 17       	cp	r26, r18
    3fb8:	b3 07       	cpc	r27, r19
    3fba:	e4 07       	cpc	r30, r20
    3fbc:	f5 07       	cpc	r31, r21
    3fbe:	20 f0       	brcs	.+8      	; 0x3fc8 <__udivmodsi4_ep>
    3fc0:	a2 1b       	sub	r26, r18
    3fc2:	b3 0b       	sbc	r27, r19
    3fc4:	e4 0b       	sbc	r30, r20
    3fc6:	f5 0b       	sbc	r31, r21

00003fc8 <__udivmodsi4_ep>:
    3fc8:	66 1f       	adc	r22, r22
    3fca:	77 1f       	adc	r23, r23
    3fcc:	88 1f       	adc	r24, r24
    3fce:	99 1f       	adc	r25, r25
    3fd0:	1a 94       	dec	r1
    3fd2:	69 f7       	brne	.-38     	; 0x3fae <__udivmodsi4_loop>
    3fd4:	60 95       	com	r22
    3fd6:	70 95       	com	r23
    3fd8:	80 95       	com	r24
    3fda:	90 95       	com	r25
    3fdc:	9b 01       	movw	r18, r22
    3fde:	ac 01       	movw	r20, r24
    3fe0:	bd 01       	movw	r22, r26
    3fe2:	cf 01       	movw	r24, r30
    3fe4:	08 95       	ret

00003fe6 <__prologue_saves__>:
    3fe6:	2f 92       	push	r2
    3fe8:	3f 92       	push	r3
    3fea:	4f 92       	push	r4
    3fec:	5f 92       	push	r5
    3fee:	6f 92       	push	r6
    3ff0:	7f 92       	push	r7
    3ff2:	8f 92       	push	r8
    3ff4:	9f 92       	push	r9
    3ff6:	af 92       	push	r10
    3ff8:	bf 92       	push	r11
    3ffa:	cf 92       	push	r12
    3ffc:	df 92       	push	r13
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
    400e:	ca 1b       	sub	r28, r26
    4010:	db 0b       	sbc	r29, r27
    4012:	0f b6       	in	r0, 0x3f	; 63
    4014:	f8 94       	cli
    4016:	de bf       	out	0x3e, r29	; 62
    4018:	0f be       	out	0x3f, r0	; 63
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	09 94       	ijmp

0000401e <__epilogue_restores__>:
    401e:	2a 88       	ldd	r2, Y+18	; 0x12
    4020:	39 88       	ldd	r3, Y+17	; 0x11
    4022:	48 88       	ldd	r4, Y+16	; 0x10
    4024:	5f 84       	ldd	r5, Y+15	; 0x0f
    4026:	6e 84       	ldd	r6, Y+14	; 0x0e
    4028:	7d 84       	ldd	r7, Y+13	; 0x0d
    402a:	8c 84       	ldd	r8, Y+12	; 0x0c
    402c:	9b 84       	ldd	r9, Y+11	; 0x0b
    402e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4030:	b9 84       	ldd	r11, Y+9	; 0x09
    4032:	c8 84       	ldd	r12, Y+8	; 0x08
    4034:	df 80       	ldd	r13, Y+7	; 0x07
    4036:	ee 80       	ldd	r14, Y+6	; 0x06
    4038:	fd 80       	ldd	r15, Y+5	; 0x05
    403a:	0c 81       	ldd	r16, Y+4	; 0x04
    403c:	1b 81       	ldd	r17, Y+3	; 0x03
    403e:	aa 81       	ldd	r26, Y+2	; 0x02
    4040:	b9 81       	ldd	r27, Y+1	; 0x01
    4042:	ce 0f       	add	r28, r30
    4044:	d1 1d       	adc	r29, r1
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	ed 01       	movw	r28, r26
    4052:	08 95       	ret

00004054 <__udivmodhi4>:
    4054:	aa 1b       	sub	r26, r26
    4056:	bb 1b       	sub	r27, r27
    4058:	51 e1       	ldi	r21, 0x11	; 17
    405a:	07 c0       	rjmp	.+14     	; 0x406a <__udivmodhi4_ep>

0000405c <__udivmodhi4_loop>:
    405c:	aa 1f       	adc	r26, r26
    405e:	bb 1f       	adc	r27, r27
    4060:	a6 17       	cp	r26, r22
    4062:	b7 07       	cpc	r27, r23
    4064:	10 f0       	brcs	.+4      	; 0x406a <__udivmodhi4_ep>
    4066:	a6 1b       	sub	r26, r22
    4068:	b7 0b       	sbc	r27, r23

0000406a <__udivmodhi4_ep>:
    406a:	88 1f       	adc	r24, r24
    406c:	99 1f       	adc	r25, r25
    406e:	5a 95       	dec	r21
    4070:	a9 f7       	brne	.-22     	; 0x405c <__udivmodhi4_loop>
    4072:	80 95       	com	r24
    4074:	90 95       	com	r25
    4076:	bc 01       	movw	r22, r24
    4078:	cd 01       	movw	r24, r26
    407a:	08 95       	ret

0000407c <_exit>:
    407c:	f8 94       	cli

0000407e <__stop_program>:
    407e:	ff cf       	rjmp	.-2      	; 0x407e <__stop_program>
